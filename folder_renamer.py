import os
import shutil
import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
import datetime
import json
import tkinter.simpledialog
import re
import sys
icon_path = os.path.join(os.path.dirname(sys.executable), 'logo.ico')
app.iconbitmap(icon_path)

class ModernFolderRenamer:
    def __init__(self, root):
        self.root = root
        self.root.title("Folder Manager - Kozen")
        self.root.geometry("900x800")
        self.root.configure(bg='#f8f9fa')
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
        self.center_window()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞—Ç–∞–∫
        self.config_file = "attack_config.json"
        self.load_attack_config()
        
        # –°—Ç–∏–ª–∏
        self.setup_styles()
        self.setup_ui()
        
    def center_window(self):
        """–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ"""
        self.root.update_idletasks()
        width = self.root.winfo_width()
        height = self.root.winfo_height()
        x = (self.root.winfo_screenwidth() // 2) - (width // 2)
        y = (self.root.winfo_screenheight() // 2) - (height // 2)
        self.root.geometry(f'{width}x{height}+{x}+{y}')
        
    def setup_styles(self):
        self.style = ttk.Style()
        self.style.theme_use('clam')
        
        # –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ü–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞
        self.colors = {
            'primary': '#4f46e5',
            'primary_light': '#6366f1',
            'secondary': '#64748b',
            'success': '#10b981',
            'warning': '#f59e0b',
            'error': '#ef4444',
            'background': '#f8f9fa',
            'surface': '#ffffff',
            'text_primary': '#1e293b',
            'text_secondary': '#64748b',
            'border': '#e2e8f0'
        }
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç–∏–ª–µ–π —Å —Å–∫—Ä—É–≥–ª—ë–Ω–Ω—ã–º–∏ –∫—Ä–∞—è–º–∏
        self.style.configure('TFrame', background=self.colors['background'])
        self.style.configure('TLabel', background=self.colors['background'], foreground=self.colors['text_primary'])
        self.style.configure('TButton', font=('Segoe UI', 10), borderwidth=0, focuscolor='none')
        self.style.configure('Rounded.TButton', 
                           background=self.colors['primary'],
                           foreground='white',
                           borderwidth=0,
                           focuscolor='none',
                           relief='flat',
                           padding=(20, 10))
        self.style.map('Rounded.TButton',
                      background=[('active', self.colors['primary_light']),
                                ('pressed', self.colors['primary'])])
        
        self.style.configure('Secondary.TButton',
                           background=self.colors['surface'],
                           foreground=self.colors['text_primary'],
                           borderwidth=1,
                           relief='solid')
        self.style.map('Secondary.TButton',
                      background=[('active', self.colors['border'])])

        self.style.configure('Success.TButton',
                           background=self.colors['success'],
                           foreground='white')
        self.style.map('Success.TButton',
                      background=[('active', '#34d399')])

        self.style.configure('Warning.TButton',
                           background=self.colors['warning'],
                           foreground='white')
        self.style.map('Warning.TButton',
                      background=[('active', '#fbbf24')])

        # –°—Ç–∏–ª–∏ –¥–ª—è —Ñ—Ä–µ–π–º–æ–≤ —Å —Å–∫—Ä—É–≥–ª—ë–Ω–Ω—ã–º–∏ –∫—Ä–∞—è–º–∏
        self.style.configure('Rounded.TFrame', 
                           background=self.colors['surface'],
                           relief='solid',
                           borderwidth=1)
        
    def load_attack_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞—Ç–∞–∫ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        default_config = {
            "2": {"kozen 10": (91, 170), "kozen 12": (171, 250)},
            "3": {"kozen 10": (251, 346), "kozen 12": (347, 442)},
            "4": {"kozen 10": (443, 458), "kozen 12": (459, 474)},
            "5": {"kozen 10": (475, 514), "kozen 12": (515, 554)},
            "6": {"kozen 10": (555, 594)},
            "7": {"kozen 12": (595, 634)},
            "8": {"kozen 10": (635, 733)},
            "9": {"kozen 12": (734, 832)}
        }
        
        try:
            if os.path.exists(self.config_file):
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    self.attack_ranges = json.load(f)
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ –∫–æ—Ä—Ç–µ–∂–∏
                    for attack, devices in self.attack_ranges.items():
                        for device, range_tuple in devices.items():
                            if isinstance(range_tuple, list):
                                self.attack_ranges[attack][device] = tuple(range_tuple)
            else:
                self.attack_ranges = default_config
                self.save_attack_config()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            self.attack_ranges = default_config
            self.save_attack_config()
    
    def save_attack_config(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞—Ç–∞–∫ –≤ JSON —Ñ–∞–π–ª"""
        try:
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(self.attack_ranges, f, indent=4, ensure_ascii=False)
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}")
    
    def create_rounded_frame(self, parent, **kwargs):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ—Ä–µ–π–º–∞ —Å —Å–∫—Ä—É–≥–ª—ë–Ω–Ω—ã–º–∏ –∫—Ä–∞—è–º–∏"""
        frame = tk.Frame(parent, 
                        bg=self.colors['surface'],
                        relief='solid',
                        bd=1,
                        **kwargs)
        return frame
    
    def setup_ui(self):
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = self.create_rounded_frame(self.root)
        header_frame.pack(fill="x", padx=20, pady=15)
        
        title_label = tk.Label(header_frame, 
                              text="üìÅ Folder Manager - Kozen", 
                              font=("Segoe UI", 20, "bold"), 
                              bg=self.colors['surface'], 
                              fg=self.colors['text_primary'],
                              pady=15)
        title_label.pack()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
        notebook = ttk.Notebook(self.root)
        notebook.pack(fill="both", expand=True, padx=20, pady=10)
        
        # –í–∫–ª–∞–¥–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
        main_tab = self.create_rounded_frame(notebook)
        notebook.add(main_tab, text="üîÑ –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏")
        
        # –í–∫–ª–∞–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞—Ç–∞–∫
        settings_tab = self.create_rounded_frame(notebook)
        notebook.add(settings_tab, text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—Ç–∞–∫")
        
        self.setup_main_tab(main_tab)
        self.setup_settings_tab(settings_tab)
        
        # –û–±–ª–∞—Å—Ç—å –¥–ª—è –ª–æ–≥–æ–≤
        self.setup_log_area()
    
    def setup_main_tab(self, parent):
        # –§—Ä–µ–π–º –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞–ø–æ–∫
        folder_frame = self.create_rounded_frame(parent)
        folder_frame.pack(fill="x", padx=15, pady=10)
        
        # –ò—Å—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞
        tk.Label(folder_frame, text="üìÇ –ò—Å—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞:", 
                font=("Segoe UI", 10, "bold"),
                bg=self.colors['surface']).grid(row=0, column=0, sticky="w", pady=(15, 5), padx=15)
        
        input_frame1 = tk.Frame(folder_frame, bg=self.colors['surface'])
        input_frame1.grid(row=1, column=0, sticky="ew", padx=15, pady=(0, 10))
        input_frame1.columnconfigure(0, weight=1)
        
        self.source_entry = ttk.Entry(input_frame1, font=("Segoe UI", 10))
        self.source_entry.grid(row=0, column=0, sticky="ew", padx=(0, 10))
        
        ttk.Button(input_frame1, text="–û–±–∑–æ—Ä", 
                  command=self.browse_source, style="Secondary.TButton").grid(row=0, column=1)
        
        # –ü–∞–ø–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        tk.Label(folder_frame, text="üìÅ –ü–∞–ø–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:", 
                font=("Segoe UI", 10, "bold"),
                bg=self.colors['surface']).grid(row=2, column=0, sticky="w", pady=(10, 5), padx=15)
        
        input_frame2 = tk.Frame(folder_frame, bg=self.colors['surface'])
        input_frame2.grid(row=3, column=0, sticky="ew", padx=15, pady=(0, 15))
        input_frame2.columnconfigure(0, weight=1)
        
        self.dest_entry = ttk.Entry(input_frame2, font=("Segoe UI", 10))
        self.dest_entry.grid(row=0, column=0, sticky="ew", padx=(0, 10))
        
        ttk.Button(input_frame2, text="–û–±–∑–æ—Ä", 
                  command=self.browse_dest, style="Secondary.TButton").grid(row=0, column=1)
        
        folder_frame.columnconfigure(0, weight=1)
        
        # –§—Ä–µ–π–º –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_frame = self.create_rounded_frame(parent)
        settings_frame.pack(fill="x", padx=15, pady=10)
        
        # –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        tk.Label(settings_frame, text="üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:", 
                font=("Segoe UI", 10, "bold"),
                bg=self.colors['surface']).grid(row=0, column=0, sticky="w", pady=(15, 10), padx=15)
        
        self.device_var = tk.StringVar(value="kozen 10")
        device_frame = tk.Frame(settings_frame, bg=self.colors['surface'])
        device_frame.grid(row=0, column=1, sticky="w", pady=(15, 10), padx=15)
        
        ttk.Radiobutton(device_frame, text="Kozen 10", variable=self.device_var, 
                       value="kozen 10", command=self.update_range_info).pack(side="left", padx=(0, 20))
        ttk.Radiobutton(device_frame, text="Kozen 12", variable=self.device_var, 
                       value="kozen 12", command=self.update_range_info).pack(side="left")
        
        # –ê—Ç–∞–∫–∞
        tk.Label(settings_frame, text="üéØ –¢–∏–ø –∞—Ç–∞–∫–∏:", 
                font=("Segoe UI", 10, "bold"),
                bg=self.colors['surface']).grid(row=1, column=0, sticky="w", pady=10, padx=15)
        
        self.attack_var = tk.StringVar(value="2")
        self.attack_combo = ttk.Combobox(settings_frame, textvariable=self.attack_var, 
                                       values=list(self.attack_ranges.keys()), 
                                       state="readonly", font=("Segoe UI", 10))
        self.attack_combo.grid(row=1, column=1, sticky="w", pady=10, padx=15)
        self.attack_combo.bind("<<ComboboxSelected>>", self.update_range_info)
        
        # –ß–µ–∫–±–æ–∫—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        self.check_content_var = tk.BooleanVar(value=False)
        check_frame = tk.Frame(settings_frame, bg=self.colors['surface'])
        check_frame.grid(row=2, column=0, columnspan=2, sticky="w", pady=10, padx=15)
        
        ttk.Checkbutton(check_frame, text="üîç –ü—Ä–æ–≤–µ—Ä—è—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–æ–∫ (3 –ø–∞–ø–∫–∏ + BestShot —Ñ–∞–π–ª)", 
                       variable=self.check_content_var).pack(side="left")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
        self.range_info = tk.Label(settings_frame, text="", font=("Segoe UI", 10), 
                                  bg=self.colors['surface'], fg=self.colors['primary'],
                                  pady=10)
        self.range_info.grid(row=3, column=0, columnspan=2, sticky="w", padx=15)
        
        settings_frame.columnconfigure(1, weight=1)
        
        # –§—Ä–µ–π–º –¥–ª—è –∑–∞–º–µ–Ω—ã –ø–∞–ø–æ–∫
        replace_frame = self.create_rounded_frame(parent)
        replace_frame.pack(fill="x", padx=15, pady=10)
        
        tk.Label(replace_frame, text="üîß –ó–∞–º–µ–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–∞–ø–æ–∫", 
                font=("Segoe UI", 10, "bold"),
                bg=self.colors['surface']).pack(anchor="w", pady=(15, 10), padx=15)
        
        tk.Label(replace_frame, text="–ù–æ–º–µ—Ä–∞ –ø–∞–ø–æ–∫ –¥–ª—è –∑–∞–º–µ–Ω—ã:", 
                font=("Segoe UI", 10),
                bg=self.colors['surface']).pack(anchor="w", padx=15)
        
        input_frame = tk.Frame(replace_frame, bg=self.colors['surface'])
        input_frame.pack(fill="x", padx=15, pady=10)
        input_frame.columnconfigure(0, weight=1)
        
        self.replace_entry = ttk.Entry(input_frame, font=("Segoe UI", 10))
        self.replace_entry.grid(row=0, column=0, sticky="ew", padx=(0, 10))
        
        tk.Label(replace_frame, text="–ü—Ä–∏–º–µ—Ä: 101,102,105-110,115", 
                font=("Segoe UI", 9),
                bg=self.colors['surface'],
                fg=self.colors['text_secondary']).pack(anchor="w", padx=15, pady=(0, 15))
        
        # –ö–Ω–æ–ø–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        button_frame = tk.Frame(parent, bg=self.colors['background'])
        button_frame.pack(fill="x", padx=15, pady=15)
        
        ttk.Button(button_frame, text="üöÄ –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", 
                  command=self.execute_renaming, 
                  style="Rounded.TButton").pack(pady=5)
        
        ttk.Button(button_frame, text="üîÑ –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–º–µ–Ω—É", 
                  command=self.execute_replacement, 
                  style="Warning.TButton").pack(pady=5)
        
        self.update_range_info()
    
    def setup_settings_tab(self, parent):
        # –§—Ä–µ–π–º –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Ç–∞–∫
        edit_frame = self.create_rounded_frame(parent)
        edit_frame.pack(fill="x", padx=15, pady=15)
        
        tk.Label(edit_frame, text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∞—Ç–∞–∫", 
                font=("Segoe UI", 12, "bold"),
                bg=self.colors['surface']).pack(anchor="w", pady=(15, 20), padx=15)
        
        # –í—ã–±–æ—Ä –∞—Ç–∞–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        input_frame1 = tk.Frame(edit_frame, bg=self.colors['surface'])
        input_frame1.pack(fill="x", padx=15, pady=10)
        
        tk.Label(input_frame1, text="–ê—Ç–∞–∫–∞:", 
                font=("Segoe UI", 10),
                bg=self.colors['surface']).grid(row=0, column=0, sticky="w")
        
        self.edit_attack_var = tk.StringVar()
        self.edit_attack_combo = ttk.Combobox(input_frame1, textvariable=self.edit_attack_var, 
                                            values=list(self.attack_ranges.keys()), 
                                            state="readonly", font=("Segoe UI", 10))
        self.edit_attack_combo.grid(row=0, column=1, sticky="ew", padx=10)
        self.edit_attack_combo.bind("<<ComboboxSelected>>", self.load_attack_data)
        
        input_frame1.columnconfigure(1, weight=1)
        
        # –ü–æ–ª—è –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
        input_frame2 = tk.Frame(edit_frame, bg=self.colors['surface'])
        input_frame2.pack(fill="x", padx=15, pady=10)
        
        tk.Label(input_frame2, text="Kozen 10 (–Ω–∞—á–∞–ª–æ-–∫–æ–Ω–µ—Ü):", 
                font=("Segoe UI", 10),
                bg=self.colors['surface']).grid(row=0, column=0, sticky="w", pady=5)
        
        self.kozen10_entry = ttk.Entry(input_frame2, font=("Segoe UI", 10))
        self.kozen10_entry.grid(row=0, column=1, sticky="ew", padx=10, pady=5)
        
        tk.Label(input_frame2, text="Kozen 12 (–Ω–∞—á–∞–ª–æ-–∫–æ–Ω–µ—Ü):", 
                font=("Segoe UI", 10),
                bg=self.colors['surface']).grid(row=1, column=0, sticky="w", pady=5)
        
        self.kozen12_entry = ttk.Entry(input_frame2, font=("Segoe UI", 10))
        self.kozen12_entry.grid(row=1, column=1, sticky="ew", padx=10, pady=5)
        
        input_frame2.columnconfigure(1, weight=1)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        button_frame = tk.Frame(edit_frame, bg=self.colors['surface'])
        button_frame.pack(fill="x", padx=15, pady=20)
        
        ttk.Button(button_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", 
                  command=self.save_attack_data, style="Success.TButton").pack(side="left", padx=5)
        ttk.Button(button_frame, text="‚ûï –ù–æ–≤–∞—è –∞—Ç–∞–∫–∞", 
                  command=self.new_attack, style="Rounded.TButton").pack(side="left", padx=5)
        ttk.Button(button_frame, text="‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", 
                  command=self.rename_attack, style="Secondary.TButton").pack(side="left", padx=5)
        ttk.Button(button_frame, text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞—Ç–∞–∫—É", 
                  command=self.delete_attack, style="Secondary.TButton").pack(side="left", padx=5)
    
    def setup_log_area(self):
        log_frame = self.create_rounded_frame(self.root)
        log_frame.pack(fill="both", expand=True, padx=20, pady=10)
        
        tk.Label(log_frame, text="üìã –õ–æ–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", 
                font=("Segoe UI", 12, "bold"),
                bg=self.colors['surface']).pack(anchor="w", pady=(15, 10), padx=15)
        
        self.log_text = scrolledtext.ScrolledText(log_frame, height=12, font=("Consolas", 9),
                                                 bg='#1e293b', fg='#e2e8f0', 
                                                 insertbackground='white',
                                                 relief='flat',
                                                 padx=10, pady=10)
        self.log_text.pack(fill="both", expand=True, padx=15, pady=(0, 15))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–≥–æ–≤ –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        self.log_text.tag_config("SUCCESS", foreground="#10b981")
        self.log_text.tag_config("WARNING", foreground="#f59e0b")
        self.log_text.tag_config("ERROR", foreground="#ef4444")
        self.log_text.tag_config("INFO", foreground="#e2e8f0")
        
        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤
        btn_frame = tk.Frame(log_frame, bg=self.colors['surface'])
        btn_frame.pack(fill="x", padx=15, pady=(0, 15))
        
        ttk.Button(btn_frame, text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏", 
                  command=self.clear_logs, style="Secondary.TButton").pack(side="right")
    
    def browse_source(self):
        folder = filedialog.askdirectory()
        if folder:
            self.source_entry.delete(0, tk.END)
            self.source_entry.insert(0, folder)
    
    def browse_dest(self):
        folder = filedialog.askdirectory()
        if folder:
            self.dest_entry.delete(0, tk.END)
            self.dest_entry.insert(0, folder)
    
    def update_range_info(self, event=None):
        attack = self.attack_var.get()
        device = self.device_var.get()
        
        if attack in self.attack_ranges and device in self.attack_ranges[attack]:
            start, end = self.attack_ranges[attack][device]
            total = end - start + 1
            self.range_info.config(text=f"üìä –î–∏–∞–ø–∞–∑–æ–Ω: {start}-{end} (–≤—Å–µ–≥–æ: {total} –Ω–æ–º–µ—Ä–æ–≤)")
        else:
            self.range_info.config(text="‚ùå –í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    
    def log(self, message, level="INFO"):
        timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        if level == "WARNING":
            icon = "‚ö†Ô∏è"
            tag = "WARNING"
        elif level == "ERROR":
            icon = "‚ùå"
            tag = "ERROR"
        elif level == "SUCCESS":
            icon = "‚úÖ"
            tag = "SUCCESS"
        else:
            icon = "‚ÑπÔ∏è"
            tag = "INFO"
        
        formatted_message = f"[{timestamp}] {icon} {message}\n"
        
        self.log_text.insert(tk.END, formatted_message, tag)
        self.log_text.see(tk.END)
        self.root.update()
    
    def clear_logs(self):
        self.log_text.delete(1.0, tk.END)
        self.log("–õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã", "INFO")
    
    def check_folder_content(self, folder_path):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–∞–ø–∫–∏"""
        try:
            items = os.listdir(folder_path)
            folders = [item for item in items if os.path.isdir(os.path.join(folder_path, item))]
            files = [item for item in items if os.path.isfile(os.path.join(folder_path, item))]
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞–ø–æ–∫
            if len(folders) != 3:
                self.log(f"–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –í –ø–∞–ø–∫–µ {os.path.basename(folder_path)} –Ω–∞–π–¥–µ–Ω–æ {len(folders)} –ø–∞–ø–æ–∫ –≤–º–µ—Å—Ç–æ 3!", "WARNING")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è BestShot —Ñ–∞–π–ª–∞
            bestshot_files = [f for f in files if "BestShot" in f]
            if not bestshot_files:
                self.log(f"–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –í –ø–∞–ø–∫–µ {os.path.basename(folder_path)} –Ω–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª BestShot!", "WARNING")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ø–∞–ø–∫–∏ –Ω–µ –ø—É—Å—Ç—ã–µ
            for folder in folders:
                folder_full_path = os.path.join(folder_path, folder)
                if not os.listdir(folder_full_path):
                    self.log(f"–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ü–∞–ø–∫–∞ {folder} –≤ {os.path.basename(folder_path)} –ø—É—Å—Ç–∞—è!", "WARNING")
                    return False
            
            return True
            
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞–ø–∫–∏ {folder_path}: {str(e)}", "ERROR")
            return False
    
    def parse_number_range(self, range_str):
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –Ω–æ–º–µ—Ä–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '101,102,105-110,115')"""
        numbers = []
        parts = range_str.split(',')
        
        for part in parts:
            part = part.strip()
            if '-' in part:
                start, end = part.split('-')
                try:
                    numbers.extend(range(int(start), int(end) + 1))
                except ValueError:
                    return None
            else:
                try:
                    numbers.append(int(part))
                except ValueError:
                    return None
        
        return sorted(set(numbers))
    
    def natural_sort_key(self, s):
        """–ö–ª—é—á –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∫–∞–∫ –≤ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–µ Windows"""
        return [int(text) if text.isdigit() else text.lower()
                for text in re.split('([0-9]+)', s)]
    
    def execute_renaming(self):
        source_folder = self.source_entry.get()
        dest_folder = self.dest_entry.get()
        device = self.device_var.get()
        attack = self.attack_var.get()
        check_content = self.check_content_var.get()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not source_folder or not dest_folder:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—É—é –ø–∞–ø–∫—É –∏ –ø–∞–ø–∫—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è")
            return
        
        if not os.path.exists(source_folder):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ò—Å—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∞—Ç–∞–∫–∏ –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        if attack not in self.attack_ranges or device not in self.attack_ranges[attack]:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –∞—Ç–∞–∫–∏ {attack} –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {device} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
        
        start_num, end_num = self.attack_ranges[attack][device]
        
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            os.makedirs(dest_folder, exist_ok=True)
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∞–ø–∫—É –¥–ª—è –∞—Ç–∞–∫–∏ –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            attack_folder = os.path.join(dest_folder, f"attack_{attack}")
            device_folder = os.path.join(attack_folder, device)
            os.makedirs(device_folder, exist_ok=True)
            
            self.log("=" * 70, "SUCCESS")
            self.log(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏...", "SUCCESS")
            self.log(f"–ò—Å—Ç–æ—á–Ω–∏–∫: {source_folder}")
            self.log(f"–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {device_folder}")
            self.log(f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")
            self.log(f"–ê—Ç–∞–∫–∞: {attack}")
            self.log(f"–î–∏–∞–ø–∞–∑–æ–Ω –Ω–æ–º–µ—Ä–æ–≤: {start_num} - {end_num}")
            self.log(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ: {'–í–ö–õ' if check_content else '–í–´–ö–õ'}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            folders = [f for f in os.listdir(source_folder) 
                      if os.path.isdir(os.path.join(source_folder, f))]
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞–ø–∫–∏ –ø–æ –∏–º–µ–Ω–∏ —Å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π
            folders.sort(key=self.natural_sort_key)
            
            if not folders:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í –∏—Å—Ö–æ–¥–Ω–æ–π –ø–∞–ø–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–∞–ø–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                return
            
            self.log(f"–ù–∞–π–¥–µ–Ω–æ –ø–∞–ø–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(folders)}")
            self.log(f"–ü–µ—Ä–≤—ã–µ 5 –ø–∞–ø–æ–∫ –ø–æ—Å–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏: {folders[:5]}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –Ω–æ–º–µ—Ä–æ–≤ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
            available_numbers = end_num - start_num + 1
            if len(folders) > available_numbers:
                messagebox.showerror("–û—à–∏–±–∫–∞", 
                    f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–æ–º–µ—Ä–æ–≤ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ! "
                    f"–ù—É–∂–Ω–æ: {len(folders)}, –¥–æ—Å—Ç—É–ø–Ω–æ: {available_numbers}")
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞–ø–∫–∏
            current_number = start_num
            processed_count = 0
            content_warnings = 0
            
            for folder in folders:
                old_path = os.path.join(source_folder, folder)
                new_name = str(current_number)
                new_path = os.path.join(device_folder, new_name)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
                if check_content:
                    if not self.check_folder_content(old_path):
                        content_warnings += 1
                
                # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–∞–ø–∫—É (–ø–µ—Ä–µ–∑–∞–ø–∏—Å—å)
                if os.path.exists(new_path):
                    shutil.rmtree(new_path)
                    self.log(f"–£–¥–∞–ª–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ø–∞–ø–∫–∞: {new_name}", "WARNING")
                
                # –ö–æ–ø–∏—Ä—É–µ–º –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –ø–∞–ø–∫—É
                shutil.copytree(old_path, new_path)
                self.log(f"–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ: {folder} -> {new_name}", "SUCCESS")
                processed_count += 1
                
                current_number += 1
            
            self.log("=" * 70, "SUCCESS")
            self.log(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!", "SUCCESS")
            self.log(f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_count} –ø–∞–ø–æ–∫")
            if content_warnings > 0:
                self.log(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É: {content_warnings}", "WARNING")
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", 
                               f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                               f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_count} –ø–∞–ø–æ–∫\n"
                               f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {content_warnings}")
            
        except Exception as e:
            self.log(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", "ERROR")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    
    def execute_replacement(self):
        source_folder = self.source_entry.get()
        dest_folder = self.dest_entry.get()
        device = self.device_var.get()
        attack = self.attack_var.get()
        replace_numbers_str = self.replace_entry.get()
        check_content = self.check_content_var.get()
        
        if not replace_numbers_str:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –ø–∞–ø–æ–∫ –¥–ª—è –∑–∞–º–µ–Ω—ã")
            return
        
        # –ü–∞—Ä—Å–∏–º –Ω–æ–º–µ—Ä–∞
        replace_numbers = self.parse_number_range(replace_numbers_str)
        if replace_numbers is None:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: 101,102,105-110,115")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        if attack not in self.attack_ranges or device not in self.attack_ranges[attack]:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –∞—Ç–∞–∫–∏ {attack} –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {device} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
        
        start_num, end_num = self.attack_ranges[attack][device]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–æ–º–µ—Ä–∞ –≤—Ö–æ–¥—è—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω
        for num in replace_numbers:
            if num < start_num or num > end_num:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–æ–º–µ—Ä {num} –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ {start_num}-{end_num}")
                return
        
        try:
            attack_folder = os.path.join(dest_folder, f"attack_{attack}")
            device_folder = os.path.join(attack_folder, device)
            
            if not os.path.exists(device_folder):
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü–∞–ø–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è {device_folder} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫ –¥–ª—è –∑–∞–º–µ–Ω—ã
            source_folders = [f for f in os.listdir(source_folder) 
                            if os.path.isdir(os.path.join(source_folder, f))]
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞–ø–∫–∏ –ø–æ –∏–º–µ–Ω–∏ —Å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π
            source_folders.sort(key=self.natural_sort_key)
            
            if len(source_folders) != len(replace_numbers):
                messagebox.showerror("–û—à–∏–±–∫–∞", 
                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–ø–æ–∫ –≤ –∏—Å—Ö–æ–¥–Ω–æ–π –ø–∞–ø–∫–µ ({len(source_folders)}) "
                    f"–Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è –∑–∞–º–µ–Ω—ã ({len(replace_numbers)})")
                return
            
            self.log("=" * 70, "SUCCESS")
            self.log(f"–ù–∞—á–∞–ª–æ –∑–∞–º–µ–Ω—ã –ø–∞–ø–æ–∫...", "SUCCESS")
            self.log(f"–ó–∞–º–µ–Ω—è–µ–º—ã–µ –Ω–æ–º–µ—Ä–∞: {replace_numbers}")
            self.log(f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–∞–ø–∫–∏: {source_folders}")
            
            content_warnings = 0
            replaced_count = 0
            
            for i, folder in enumerate(source_folders):
                if i >= len(replace_numbers):
                    break
                    
                old_path = os.path.join(source_folder, folder)
                new_name = str(replace_numbers[i])
                new_path = os.path.join(device_folder, new_name)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
                if check_content:
                    if not self.check_folder_content(old_path):
                        content_warnings += 1
                
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –ø–∞–ø–∫—É –∏ –∫–æ–ø–∏—Ä—É–µ–º –Ω–æ–≤—É—é
                if os.path.exists(new_path):
                    shutil.rmtree(new_path)
                
                shutil.copytree(old_path, new_path)
                self.log(f"–ó–∞–º–µ–Ω–µ–Ω–∞ –ø–∞–ø–∫–∞ {replace_numbers[i]}: {folder} -> {new_name}", "SUCCESS")
                replaced_count += 1
            
            self.log("=" * 70, "SUCCESS")
            self.log(f"–ó–∞–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!", "SUCCESS")
            self.log(f"–ó–∞–º–µ–Ω–µ–Ω–æ –ø–∞–ø–æ–∫: {replaced_count}")
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ó–∞–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n‚úÖ –ó–∞–º–µ–Ω–µ–Ω–æ –ø–∞–ø–æ–∫: {replaced_count}")
            
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–º–µ–Ω–µ: {str(e)}", "ERROR")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    
    def load_attack_data(self, event=None):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∞—Ç–∞–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        attack = self.edit_attack_var.get()
        if attack in self.attack_ranges:
            ranges = self.attack_ranges[attack]
            
            kozen10 = ranges.get("kozen 10", (0, 0))
            kozen12 = ranges.get("kozen 12", (0, 0))
            
            self.kozen10_entry.delete(0, tk.END)
            self.kozen10_entry.insert(0, f"{kozen10[0]}-{kozen10[1]}" if kozen10 != (0,0) else "")
            
            self.kozen12_entry.delete(0, tk.END)
            self.kozen12_entry.insert(0, f"{kozen12[0]}-{kozen12[1]}" if kozen12 != (0,0) else "")
    
    def save_attack_data(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∞—Ç–∞–∫–∏"""
        attack = self.edit_attack_var.get()
        if not attack:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –∞—Ç–∞–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        try:
            # –ü–∞—Ä—Å–∏–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã
            kozen10_str = self.kozen10_entry.get().strip()
            kozen12_str = self.kozen12_entry.get().strip()
            
            new_ranges = {}
            
            if kozen10_str:
                start, end = map(int, kozen10_str.split('-'))
                new_ranges["kozen 10"] = (start, end)
            
            if kozen12_str:
                start, end = map(int, kozen12_str.split('-'))
                new_ranges["kozen 12"] = (start, end)
            
            if not new_ranges:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¥–∏–∞–ø–∞–∑–æ–Ω")
                return
            
            self.attack_ranges[attack] = new_ranges
            self.save_attack_config()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–±–æ–±–æ–∫—Å—ã
            attacks = list(self.attack_ranges.keys())
            self.attack_combo['values'] = attacks
            self.edit_attack_combo['values'] = attacks
            
            self.log(f"–ê—Ç–∞–∫–∞ {attack} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞", "SUCCESS")
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ê—Ç–∞–∫–∞ {attack} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")
    
    def new_attack(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∞—Ç–∞–∫–∏"""
        attack = tk.simpledialog.askstring("–ù–æ–≤–∞—è –∞—Ç–∞–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–æ–≤–æ–π –∞—Ç–∞–∫–∏:")
        if attack:
            if attack in self.attack_ranges:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ê—Ç–∞–∫–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return
            
            self.attack_ranges[attack] = {}
            self.save_attack_config()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–±–æ–±–æ–∫—Å—ã
            attacks = list(self.attack_ranges.keys())
            self.attack_combo['values'] = attacks
            self.edit_attack_combo['values'] = attacks
            
            self.edit_attack_var.set(attack)
            self.load_attack_data()
            
            self.log(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∞—Ç–∞–∫–∞: {attack}", "SUCCESS")
    
    def rename_attack(self):
        """–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∞—Ç–∞–∫–∏"""
        old_attack = self.edit_attack_var.get()
        if not old_attack:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –∞—Ç–∞–∫—É –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è")
            return
        
        new_attack = tk.simpledialog.askstring("–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∞—Ç–∞–∫–∏", 
                                              f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∞—Ç–∞–∫–∏ {old_attack}:",
                                              initialvalue=old_attack)
        if new_attack:
            if new_attack in self.attack_ranges:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ê—Ç–∞–∫–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä–æ–π –∞—Ç–∞–∫–∏
            attack_data = self.attack_ranges[old_attack]
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∞—Ç–∞–∫—É –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
            del self.attack_ranges[old_attack]
            self.attack_ranges[new_attack] = attack_data
            self.save_attack_config()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–±–æ–±–æ–∫—Å—ã
            attacks = list(self.attack_ranges.keys())
            self.attack_combo['values'] = attacks
            self.edit_attack_combo['values'] = attacks
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            self.attack_var.set(new_attack)
            self.edit_attack_var.set(new_attack)
            self.load_attack_data()
            
            self.log(f"–ê—Ç–∞–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞: {old_attack} -> {new_attack}", "SUCCESS")
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ê—Ç–∞–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞: {old_attack} -> {new_attack}")
    
    def delete_attack(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∞—Ç–∞–∫–∏"""
        attack = self.edit_attack_var.get()
        if not attack:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –∞—Ç–∞–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞—Ç–∞–∫—É {attack}?"):
            del self.attack_ranges[attack]
            self.save_attack_config()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–±–æ–±–æ–∫—Å—ã
            attacks = list(self.attack_ranges.keys())
            self.attack_combo['values'] = attacks
            self.edit_attack_combo['values'] = attacks
            
            if attacks:
                self.edit_attack_var.set(attacks[0])
                self.load_attack_data()
            else:
                self.edit_attack_var.set("")
                self.kozen10_entry.delete(0, tk.END)
                self.kozen12_entry.delete(0, tk.END)
            
            self.log(f"–ê—Ç–∞–∫–∞ {attack} —É–¥–∞–ª–µ–Ω–∞", "SUCCESS")

def main():
    root = tk.Tk()
    app = ModernFolderRenamer(root)
    root.mainloop()

if __name__ == "__main__":
    main()