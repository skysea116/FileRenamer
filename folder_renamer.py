import os
import shutil
import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
import datetime
import json
import tkinter.simpledialog
import re

class ModernFolderRenamer:
    def __init__(self, root):
        self.root = root
        self.root.title("Folder Manager - Kozen")
        self.root.geometry("1200x750")
        self.root.configure(bg='#f8f9fa')
        self.root.minsize(1000, 600)
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
        self.center_window()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞—Ç–∞–∫
        self.config_file = "attack_config.json"
        self.load_attack_config()
        
        # –°—Ç–∏–ª–∏
        self.setup_styles()
        self.setup_ui()
        
    def center_window(self):
        """–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ"""
        self.root.update_idletasks()
        width = self.root.winfo_width()
        height = self.root.winfo_height()
        x = (self.root.winfo_screenwidth() // 2) - (width // 2)
        y = (self.root.winfo_screenheight() // 2) - (height // 2)
        self.root.geometry(f'{width}x{height}+{x}+{y}')
        
    def setup_styles(self):
        self.style = ttk.Style()
        self.style.theme_use('clam')
        
        # –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ü–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞
        self.colors = {
            'primary': '#4f46e5',
            'primary_light': '#6366f1',
            'secondary': '#64748b',
            'success': '#10b981',
            'warning': '#f59e0b',
            'error': '#ef4444',
            'background': '#f8f9fa',
            'surface': '#ffffff',
            'text_primary': '#1e293b',
            'text_secondary': '#64748b',
            'border': '#e2e8f0'
        }
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç–∏–ª–µ–π
        self.style.configure('TFrame', background=self.colors['background'])
        self.style.configure('TLabel', background=self.colors['background'], foreground=self.colors['text_primary'])
        self.style.configure('TButton', font=('Segoe UI', 9), borderwidth=0, focuscolor='none')
        self.style.configure('Rounded.TButton', 
                           background=self.colors['primary'],
                           foreground='white',
                           borderwidth=0,
                           focuscolor='none',
                           relief='flat',
                           padding=(15, 8))
        self.style.map('Rounded.TButton',
                      background=[('active', self.colors['primary_light']),
                                ('pressed', self.colors['primary'])])
        
        self.style.configure('Secondary.TButton',
                           background=self.colors['surface'],
                           foreground=self.colors['text_primary'],
                           borderwidth=1,
                           relief='solid')
        self.style.map('Secondary.TButton',
                      background=[('active', self.colors['border'])])

        self.style.configure('Success.TButton',
                           background=self.colors['success'],
                           foreground='white')
        self.style.map('Success.TButton',
                      background=[('active', '#34d399')])

        self.style.configure('Warning.TButton',
                           background=self.colors['warning'],
                           foreground='white')
        self.style.map('Warning.TButton',
                      background=[('active', '#fbbf24')])

        self.style.configure('Rounded.TFrame', 
                           background=self.colors['surface'],
                           relief='solid',
                           borderwidth=1)
        
    def load_attack_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞—Ç–∞–∫ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        default_config = {
            "02 2D Mask": {"kozen 10": (91, 170), "kozen 12": (171, 250)},
            "03 2D Mask": {"kozen 10": (251, 346), "kozen 12": (347, 442)},
            "04 2D Mask": {"kozen 10": (443, 458), "kozen 12": (459, 474)},
            "05 2D Mask": {"kozen 10": (475, 514), "kozen 12": (515, 554)},
            "06 2D Mask": {"kozen 10": (555, 594)},
            "07 2D Mask": {"kozen 12": (595, 634)},
            "08 3D Mask": {"kozen 10": (635, 733)},
            "09 3D Mask": {"kozen 12": (734, 832)}
        }
        
        try:
            if os.path.exists(self.config_file):
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    self.attack_ranges = json.load(f)
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ –∫–æ—Ä—Ç–µ–∂–∏
                    for attack, devices in self.attack_ranges.items():
                        for device, range_tuple in devices.items():
                            if isinstance(range_tuple, list):
                                self.attack_ranges[attack][device] = tuple(range_tuple)
            else:
                self.attack_ranges = default_config
                self.save_attack_config()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            self.attack_ranges = default_config
            self.save_attack_config()
    
    def save_attack_config(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞—Ç–∞–∫ –≤ JSON —Ñ–∞–π–ª"""
        try:
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(self.attack_ranges, f, indent=4, ensure_ascii=False)
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}")
    
    def create_rounded_frame(self, parent, **kwargs):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ—Ä–µ–π–º–∞ —Å —Å–∫—Ä—É–≥–ª—ë–Ω–Ω—ã–º–∏ –∫—Ä–∞—è–º–∏"""
        frame = tk.Frame(parent, 
                        bg=self.colors['surface'],
                        relief='solid',
                        bd=1,
                        **kwargs)
        return frame
    
    def setup_ui(self):
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = self.create_rounded_frame(self.root)
        header_frame.pack(fill="x", padx=15, pady=10)
        
        title_label = tk.Label(header_frame, 
                              text="üìÅ Folder Manager - Kozen", 
                              font=("Segoe UI", 18, "bold"),
                              bg=self.colors['surface'], 
                              fg=self.colors['text_primary'],
                              pady=12)
        title_label.pack()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
        notebook = ttk.Notebook(self.root)
        notebook.pack(fill="both", expand=True, padx=15, pady=8)
        
        # –í–∫–ª–∞–¥–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
        main_tab = self.create_rounded_frame(notebook)
        notebook.add(main_tab, text="üîÑ –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏")
        
        # –í–∫–ª–∞–¥–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
        check_tab = self.create_rounded_frame(notebook)
        notebook.add(check_tab, text="üîç –ü—Ä–æ–≤–µ—Ä–∫–∞")
        
        # –í–∫–ª–∞–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞—Ç–∞–∫
        settings_tab = self.create_rounded_frame(notebook)
        notebook.add(settings_tab, text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—Ç–∞–∫")
        
        self.setup_main_tab(main_tab)
        self.setup_check_tab(check_tab)
        self.setup_settings_tab(settings_tab)
    
    def setup_main_tab(self, parent):
        # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–¥–µ–ª—è–µ–º—ã–π —Ñ—Ä–µ–π–º –¥–ª—è –ª–µ–≤–æ–π (–Ω–∞—Å—Ç—Ä–æ–π–∫–∏) –∏ –ø—Ä–∞–≤–æ–π (–ª–æ–≥–∏) —á–∞—Å—Ç–∏
        main_paned = ttk.PanedWindow(parent, orient=tk.HORIZONTAL)
        main_paned.pack(fill="both", expand=True, padx=10, pady=10)
        
        # –õ–µ–≤–∞—è —á–∞—Å—Ç—å - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        left_frame = self.create_rounded_frame(main_paned)
        main_paned.add(left_frame, weight=1)
        
        # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - –ª–æ–≥–∏
        right_frame = self.create_rounded_frame(main_paned)
        main_paned.add(right_frame, weight=1)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–µ–≤–æ–π —á–∞—Å—Ç–∏ - —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        # –§—Ä–µ–π–º –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞–ø–æ–∫
        folder_frame = self.create_rounded_frame(left_frame)
        folder_frame.pack(fill="x", padx=10, pady=8)
        
        # –ò—Å—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞
        tk.Label(folder_frame, text="üìÇ –ò—Å—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞:", 
                font=("Segoe UI", 9, "bold"),
                bg=self.colors['surface']).grid(row=0, column=0, sticky="w", pady=(12, 4), padx=12)
        
        input_frame1 = tk.Frame(folder_frame, bg=self.colors['surface'])
        input_frame1.grid(row=1, column=0, sticky="ew", padx=12, pady=(0, 8))
        input_frame1.columnconfigure(0, weight=1)
        
        self.source_entry = ttk.Entry(input_frame1, font=("Segoe UI", 9))
        self.source_entry.grid(row=0, column=0, sticky="ew", padx=(0, 8))
        
        ttk.Button(input_frame1, text="–û–±–∑–æ—Ä", 
                  command=self.browse_source, style="Secondary.TButton").grid(row=0, column=1)
        
        # –ü–∞–ø–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        tk.Label(folder_frame, text="üìÅ –ü–∞–ø–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:", 
                font=("Segoe UI", 9, "bold"),
                bg=self.colors['surface']).grid(row=2, column=0, sticky="w", pady=(8, 4), padx=12)
        
        input_frame2 = tk.Frame(folder_frame, bg=self.colors['surface'])
        input_frame2.grid(row=3, column=0, sticky="ew", padx=12, pady=(0, 12))
        input_frame2.columnconfigure(0, weight=1)
        
        self.dest_entry = ttk.Entry(input_frame2, font=("Segoe UI", 9))
        self.dest_entry.grid(row=0, column=0, sticky="ew", padx=(0, 8))
        
        ttk.Button(input_frame2, text="–û–±–∑–æ—Ä", 
                  command=self.browse_dest, style="Secondary.TButton").grid(row=0, column=1)
        
        folder_frame.columnconfigure(0, weight=1)
        
        # –§—Ä–µ–π–º –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_frame = self.create_rounded_frame(left_frame)
        settings_frame.pack(fill="x", padx=10, pady=8)
        
        # –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        tk.Label(settings_frame, text="üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:", 
                font=("Segoe UI", 9, "bold"),
                bg=self.colors['surface']).grid(row=0, column=0, sticky="w", pady=(12, 8), padx=12)
        
        self.device_var = tk.StringVar(value="–≤—Å–µ")
        device_frame = tk.Frame(settings_frame, bg=self.colors['surface'])
        device_frame.grid(row=0, column=1, sticky="w", pady=(12, 8), padx=12)
        
        ttk.Radiobutton(device_frame, text="–í—Å–µ", variable=self.device_var, 
                       value="–≤—Å–µ", command=self.update_range_info).pack(side="left", padx=(0, 15))
        ttk.Radiobutton(device_frame, text="Kozen 10", variable=self.device_var, 
                       value="kozen 10", command=self.update_range_info).pack(side="left", padx=(0, 15))
        ttk.Radiobutton(device_frame, text="Kozen 12", variable=self.device_var, 
                       value="kozen 12", command=self.update_range_info).pack(side="left")
        
        # –ê—Ç–∞–∫–∞
        tk.Label(settings_frame, text="üéØ –¢–∏–ø –∞—Ç–∞–∫–∏:", 
                font=("Segoe UI", 9, "bold"),
                bg=self.colors['surface']).grid(row=1, column=0, sticky="w", pady=8, padx=12)
        
        self.attack_var = tk.StringVar(value="02 2D Mask")
        self.attack_combo = ttk.Combobox(settings_frame, textvariable=self.attack_var, 
                                       values=list(self.attack_ranges.keys()), 
                                       state="readonly", font=("Segoe UI", 9))
        self.attack_combo.grid(row=1, column=1, sticky="w", pady=8, padx=12)
        self.attack_combo.bind("<<ComboboxSelected>>", self.update_range_info)
        
        # –ß–µ–∫–±–æ–∫—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        self.check_content_var = tk.BooleanVar(value=False)
        check_frame = tk.Frame(settings_frame, bg=self.colors['surface'])
        check_frame.grid(row=2, column=0, columnspan=2, sticky="w", pady=8, padx=12)
        
        ttk.Checkbutton(check_frame, text="üîç –ü—Ä–æ–≤–µ—Ä—è—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–æ–∫ (3 –ø–∞–ø–∫–∏ + BestShot —Ñ–∞–π–ª)", 
                       variable=self.check_content_var, style="TCheckbutton").pack(side="left")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
        self.range_info = tk.Label(settings_frame, text="", font=("Segoe UI", 9),
                                  bg=self.colors['surface'], fg=self.colors['primary'],
                                  pady=8)
        self.range_info.grid(row=3, column=0, columnspan=2, sticky="w", padx=12)
        
        settings_frame.columnconfigure(1, weight=1)
        
        # –§—Ä–µ–π–º –¥–ª—è –∑–∞–º–µ–Ω—ã –ø–∞–ø–æ–∫
        replace_frame = self.create_rounded_frame(left_frame)
        replace_frame.pack(fill="x", padx=10, pady=8)
        
        tk.Label(replace_frame, text="üîß –ó–∞–º–µ–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–∞–ø–æ–∫", 
                font=("Segoe UI", 9, "bold"),
                bg=self.colors['surface']).pack(anchor="w", pady=(12, 8), padx=12)
        
        tk.Label(replace_frame, text="–ù–æ–º–µ—Ä–∞ –ø–∞–ø–æ–∫ –¥–ª—è –∑–∞–º–µ–Ω—ã:", 
                font=("Segoe UI", 9),
                bg=self.colors['surface']).pack(anchor="w", padx=12)
        
        input_frame = tk.Frame(replace_frame, bg=self.colors['surface'])
        input_frame.pack(fill="x", padx=12, pady=8)
        input_frame.columnconfigure(0, weight=1)
        
        self.replace_entry = ttk.Entry(input_frame, font=("Segoe UI", 9))
        self.replace_entry.grid(row=0, column=0, sticky="ew", padx=(0, 8))
        
        tk.Label(replace_frame, text="–ü—Ä–∏–º–µ—Ä: 522, 530-532,528", 
                font=("Segoe UI", 8),
                bg=self.colors['surface'],
                fg=self.colors['text_secondary']).pack(anchor="w", padx=12, pady=(0, 12))
        
        # –ö–Ω–æ–ø–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è - –í–ï–†–¢–ò–ö–ê–õ–¨–ù–û –¥–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö —ç–∫—Ä–∞–Ω–æ–≤
        button_frame = tk.Frame(left_frame, bg=self.colors['background'])
        button_frame.pack(fill="x", padx=10, pady=10)
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫ - –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ
        btn_container = tk.Frame(button_frame, bg=self.colors['background'])
        btn_container.pack(fill="x")
        
        # –ö–Ω–æ–ø–∫–∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω—ã–µ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ
        self.rename_btn = ttk.Button(btn_container, text="üöÄ –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", 
                                   command=self.execute_renaming, 
                                   style="Rounded.TButton")
        self.rename_btn.pack(fill="x", pady=2)
        
        self.replace_btn = ttk.Button(btn_container, text="üîÑ –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–º–µ–Ω—É", 
                                    command=self.execute_replacement, 
                                    style="Warning.TButton")
        self.replace_btn.pack(fill="x", pady=2)
        
        self.update_range_info()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤–æ–π —á–∞—Å—Ç–∏ - –ª–æ–≥–∏
        log_header_frame = tk.Frame(right_frame, bg=self.colors['surface'])
        log_header_frame.pack(fill="x", padx=12, pady=(12, 8))
        
        tk.Label(log_header_frame, text="üìã –û—Å–Ω–æ–≤–Ω—ã–µ –ª–æ–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", 
                font=("Segoe UI", 11, "bold"),
                bg=self.colors['surface']).pack(side="left")
        
        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
        ttk.Button(log_header_frame, text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏", 
                  command=self.clear_logs, style="Secondary.TButton").pack(side="right")
        
        # –§—Ä–µ–π–º –¥–ª—è –ª–æ–≥–æ–≤ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        log_container = tk.Frame(right_frame, bg=self.colors['surface'])
        log_container.pack(fill="both", expand=True, padx=12, pady=(0, 12))
        
        self.log_text = scrolledtext.ScrolledText(log_container, height=20, font=("Consolas", 8),
                                                 bg='#1e293b', fg='#e2e8f0', 
                                                 insertbackground='white',
                                                 relief='flat',
                                                 padx=8, pady=8)
        self.log_text.pack(fill="both", expand=True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–≥–æ–≤ –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        self.log_text.tag_config("SUCCESS", foreground="#10b981")
        self.log_text.tag_config("WARNING", foreground="#f59e0b")
        self.log_text.tag_config("ERROR", foreground="#ef4444")
        self.log_text.tag_config("INFO", foreground="#e2e8f0")
        self.log_text.tag_config("CRITICAL", foreground="#ff0000", background="#330000")
        self.log_text.tag_config("HEADER", foreground="#93c5fd", font=("Consolas", 8, "bold"))
        self.log_text.tag_config("DETAIL", foreground="#94a3b8")
    
    def setup_check_tab(self, parent):
        paned_window = ttk.PanedWindow(parent, orient=tk.HORIZONTAL)
        paned_window.pack(fill="both", expand=True, padx=10, pady=10)
        
        # –õ–µ–≤–∞—è —á–∞—Å—Ç—å - —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        left_frame = self.create_rounded_frame(paned_window)
        paned_window.add(left_frame, weight=1)
        
        # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - –ª–æ–≥–∏
        right_frame = self.create_rounded_frame(paned_window)
        paned_window.add(right_frame, weight=2)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–µ–≤–æ–π —á–∞—Å—Ç–∏
        attack_check_frame = self.create_rounded_frame(left_frame)
        attack_check_frame.pack(fill="x", padx=10, pady=8)
        
        tk.Label(attack_check_frame, text="üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ç–∞–∫–∏", 
                font=("Segoe UI", 11, "bold"),
                bg=self.colors['surface']).pack(anchor="w", pady=(12, 8), padx=12)
        
        input_frame1 = tk.Frame(attack_check_frame, bg=self.colors['surface'])
        input_frame1.pack(fill="x", padx=12, pady=8)
        
        tk.Label(input_frame1, text="–ü–∞–ø–∫–∞ –∞—Ç–∞–∫–∏:", 
                font=("Segoe UI", 9),
                bg=self.colors['surface']).grid(row=0, column=0, sticky="w")
        
        self.attack_check_entry = ttk.Entry(input_frame1, font=("Segoe UI", 9))
        self.attack_check_entry.grid(row=0, column=1, sticky="ew", padx=8)
        
        ttk.Button(input_frame1, text="–û–±–∑–æ—Ä", 
                  command=lambda: self.browse_folder(self.attack_check_entry),
                  style="Secondary.TButton").grid(row=0, column=2, padx=(5, 0))
        
        input_frame1.columnconfigure(1, weight=1)
        
        ttk.Button(attack_check_frame, text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞—Ç–∞–∫—É", 
                  command=self.check_attack, 
                  style="Rounded.TButton").pack(pady=8)
        
        # –§—Ä–µ–π–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ ID
        id_check_frame = self.create_rounded_frame(left_frame)
        id_check_frame.pack(fill="x", padx=10, pady=8)
        
        tk.Label(id_check_frame, text="üÜî –ü—Ä–æ–≤–µ—Ä–∫–∞ ID", 
                font=("Segoe UI", 11, "bold"),
                bg=self.colors['surface']).pack(anchor="w", pady=(12, 8), padx=12)
        
        input_frame2 = tk.Frame(id_check_frame, bg=self.colors['surface'])
        input_frame2.pack(fill="x", padx=12, pady=8)
        
        tk.Label(input_frame2, text="–ü–∞–ø–∫–∞ ID:", 
                font=("Segoe UI", 9),
                bg=self.colors['surface']).grid(row=0, column=0, sticky="w")
        
        self.id_check_entry = ttk.Entry(input_frame2, font=("Segoe UI", 9))
        self.id_check_entry.grid(row=0, column=1, sticky="ew", padx=8)
        
        ttk.Button(input_frame2, text="–û–±–∑–æ—Ä", 
                  command=lambda: self.browse_folder(self.id_check_entry),
                  style="Secondary.TButton").grid(row=0, column=2, padx=(5, 0))
        
        input_frame2.columnconfigure(1, weight=1)
        
        ttk.Button(id_check_frame, text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å ID", 
                  command=self.check_id, 
                  style="Rounded.TButton").pack(pady=8)
        
        # –§—Ä–µ–π–º –¥–ª—è –æ–±—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        global_check_frame = self.create_rounded_frame(left_frame)
        global_check_frame.pack(fill="x", padx=10, pady=8)
        
        tk.Label(global_check_frame, text="üåê –û–±—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞", 
                font=("Segoe UI", 11, "bold"),
                bg=self.colors['surface']).pack(anchor="w", pady=(12, 8), padx=12)
        
        input_frame3 = tk.Frame(global_check_frame, bg=self.colors['surface'])
        input_frame3.pack(fill="x", padx=12, pady=8)
        
        tk.Label(input_frame3, text="–û–±—â–∞—è –ø–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞:", 
                font=("Segoe UI", 9),
                bg=self.colors['surface']).grid(row=0, column=0, sticky="w")
        
        self.global_check_entry = ttk.Entry(input_frame3, font=("Segoe UI", 9))
        self.global_check_entry.grid(row=0, column=1, sticky="ew", padx=8)
        
        ttk.Button(input_frame3, text="–û–±–∑–æ—Ä", 
                  command=lambda: self.browse_folder(self.global_check_entry),
                  style="Secondary.TButton").grid(row=0, column=2, padx=(5, 0))
        
        input_frame3.columnconfigure(1, weight=1)
        
        ttk.Button(global_check_frame, text="üîç –í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–±—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É", 
                  command=self.check_global, 
                  style="Rounded.TButton").pack(pady=8)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤–æ–π —á–∞—Å—Ç–∏ - –ª–æ–≥–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏
        check_log_header = tk.Frame(right_frame, bg=self.colors['surface'])
        check_log_header.pack(fill="x", padx=12, pady=(12, 8))
        
        tk.Label(check_log_header, text="üìã –õ–æ–≥–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏", 
                font=("Segoe UI", 11, "bold"),
                bg=self.colors['surface']).pack(side="left")
        
        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
        ttk.Button(check_log_header, text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏", 
                  command=self.clear_check_logs, style="Secondary.TButton").pack(side="right")
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ª–æ–≥–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏
        check_log_container = tk.Frame(right_frame, bg=self.colors['surface'])
        check_log_container.pack(fill="both", expand=True, padx=12, pady=(0, 12))
        
        self.check_log_text = scrolledtext.ScrolledText(check_log_container, height=20, font=("Consolas", 8),
                                                       bg='#1e293b', fg='#e2e8f0', 
                                                       insertbackground='white',
                                                       relief='flat',
                                                       padx=8, pady=8)
        self.check_log_text.pack(fill="both", expand=True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–≥–æ–≤ –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        self.check_log_text.tag_config("SUCCESS", foreground="#10b981")
        self.check_log_text.tag_config("WARNING", foreground="#f59e0b")
        self.check_log_text.tag_config("ERROR", foreground="#ef4444")
        self.check_log_text.tag_config("INFO", foreground="#e2e8f0")
        self.check_log_text.tag_config("CRITICAL", foreground="#ff0000", background="#330000")
        self.check_log_text.tag_config("HEADER", foreground="#93c5fd", font=("Consolas", 8, "bold"))
        self.check_log_text.tag_config("SECTION", foreground="#cbd5e1", font=("Consolas", 8, "bold"))
        self.check_log_text.tag_config("DETAIL", foreground="#94a3b8")
    
    def setup_settings_tab(self, parent):
        edit_frame = self.create_rounded_frame(parent)
        edit_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        tk.Label(edit_frame, text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∞—Ç–∞–∫", 
                font=("Segoe UI", 11, "bold"),
                bg=self.colors['surface']).pack(anchor="w", pady=(12, 15), padx=12)
        
        input_frame1 = tk.Frame(edit_frame, bg=self.colors['surface'])
        input_frame1.pack(fill="x", padx=12, pady=8)
        
        tk.Label(input_frame1, text="–ê—Ç–∞–∫–∞:", 
                font=("Segoe UI", 9),
                bg=self.colors['surface']).grid(row=0, column=0, sticky="w")
        
        self.edit_attack_var = tk.StringVar()
        self.edit_attack_combo = ttk.Combobox(input_frame1, textvariable=self.edit_attack_var, 
                                            values=list(self.attack_ranges.keys()), 
                                            state="readonly", font=("Segoe UI", 9))
        self.edit_attack_combo.grid(row=0, column=1, sticky="ew", padx=8)
        self.edit_attack_combo.bind("<<ComboboxSelected>>", self.load_attack_data)
        
        input_frame1.columnconfigure(1, weight=1)
        
        input_frame2 = tk.Frame(edit_frame, bg=self.colors['surface'])
        input_frame2.pack(fill="x", padx=12, pady=8)
        
        tk.Label(input_frame2, text="Kozen 10 (–Ω–∞—á–∞–ª–æ-–∫–æ–Ω–µ—Ü):", 
                font=("Segoe UI", 9),
                bg=self.colors['surface']).grid(row=0, column=0, sticky="w", pady=4)
        
        self.kozen10_entry = ttk.Entry(input_frame2, font=("Segoe UI", 9))
        self.kozen10_entry.grid(row=0, column=1, sticky="ew", padx=8, pady=4)
        
        tk.Label(input_frame2, text="Kozen 12 (–Ω–∞—á–∞–ª–æ-–∫–æ–Ω–µ—Ü):", 
                font=("Segoe UI", 9),
                bg=self.colors['surface']).grid(row=1, column=0, sticky="w", pady=4)
        
        self.kozen12_entry = ttk.Entry(input_frame2, font=("Segoe UI", 9))
        self.kozen12_entry.grid(row=1, column=1, sticky="ew", padx=8, pady=4)
        
        input_frame2.columnconfigure(1, weight=1)
        
        button_frame = tk.Frame(edit_frame, bg=self.colors['surface'])
        button_frame.pack(fill="x", padx=12, pady=15)
        
        # –ö–Ω–æ–ø–∫–∏ –≤ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö —ç–∫—Ä–∞–Ω–æ–≤
        top_button_frame = tk.Frame(button_frame, bg=self.colors['surface'])
        top_button_frame.pack(fill="x", pady=2)
        
        ttk.Button(top_button_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", 
                  command=self.save_attack_data, style="Success.TButton").pack(side="left", padx=2)
        ttk.Button(top_button_frame, text="‚ûï –ù–æ–≤–∞—è –∞—Ç–∞–∫–∞", 
                  command=self.new_attack, style="Rounded.TButton").pack(side="left", padx=2)
        
        bottom_button_frame = tk.Frame(button_frame, bg=self.colors['surface'])
        bottom_button_frame.pack(fill="x", pady=2)
        
        ttk.Button(bottom_button_frame, text="‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", 
                  command=self.rename_attack, style="Secondary.TButton").pack(side="left", padx=2)
        ttk.Button(bottom_button_frame, text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞—Ç–∞–∫—É", 
                  command=self.delete_attack, style="Secondary.TButton").pack(side="left", padx=2)
    
    def browse_source(self):
        folder = filedialog.askdirectory()
        if folder:
            self.source_entry.delete(0, tk.END)
            self.source_entry.insert(0, folder)
    
    def browse_dest(self):
        folder = filedialog.askdirectory()
        if folder:
            self.dest_entry.delete(0, tk.END)
            self.dest_entry.insert(0, folder)
    
    def browse_folder(self, entry_widget):
        folder = filedialog.askdirectory()
        if folder:
            entry_widget.delete(0, tk.END)
            entry_widget.insert(0, folder)
    
    def update_range_info(self, event=None):
        attack = self.attack_var.get()
        device = self.device_var.get()
        
        if device == "–≤—Å–µ":
            min_num = None
            max_num = None
            for device_name in ["kozen 10", "kozen 12"]:
                if attack in self.attack_ranges and device_name in self.attack_ranges[attack]:
                    start, end = self.attack_ranges[attack][device_name]
                    if min_num is None or start < min_num:
                        min_num = start
                    if max_num is None or end > max_num:
                        max_num = end
            
            if min_num is not None and max_num is not None:
                total = max_num - min_num + 1
                self.range_info.config(text=f"üìä –û–±—â–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω: {min_num}-{max_num} (–≤—Å–µ–≥–æ: {total} –Ω–æ–º–µ—Ä–æ–≤)")
            else:
                self.range_info.config(text="‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞—Ö")
        elif attack in self.attack_ranges and device in self.attack_ranges[attack]:
            start, end = self.attack_ranges[attack][device]
            total = end - start + 1
            self.range_info.config(text=f"üìä –î–∏–∞–ø–∞–∑–æ–Ω: {start}-{end} (–≤—Å–µ–≥–æ: {total} –Ω–æ–º–µ—Ä–æ–≤)")
        else:
            self.range_info.config(text="‚ùå –í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    
    def get_image_date(self, image_path):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞—Ç—É —Å—ä—ë–º–∫–∏ –∏–∑ EXIF –¥–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ Pillow)"""
        try:
            # –í–º–µ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Pillow, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—Ç—É –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
            # –≠—Ç–æ –Ω–µ –∏–¥–µ–∞–ª—å–Ω–æ, –Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            timestamp = os.path.getmtime(image_path)
            return datetime.datetime.fromtimestamp(timestamp)
        except Exception:
            return None
    
    def find_image_files(self, folder_path):
        """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø–∞–ø–∫–µ"""
        image_extensions = {'.jpg', '.jpeg', '.png', '.tiff', '.bmp', '.gif'}
        image_files = []
        
        try:
            for root, dirs, files in os.walk(folder_path):
                for file in files:
                    if any(file.lower().endswith(ext) for ext in image_extensions):
                        image_files.append(os.path.join(root, file))
        except Exception:
            pass
        
        return image_files
    
    def get_folder_shooting_time(self, folder_path):
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è —Å—ä—ë–º–∫–∏ –¥–ª—è –ø–∞–ø–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º BestShot
        bestshot_files = []
        try:
            for file in os.listdir(folder_path):
                if "bestshot" in file.lower() and any(file.lower().endswith(ext) for ext in ['.jpg', '.jpeg', '.png']):
                    bestshot_files.append(os.path.join(folder_path, file))
        except Exception:
            pass
        
        if bestshot_files:
            date = self.get_image_date(bestshot_files[0])
            if date:
                return date
        
        # –ï—Å–ª–∏ BestShot –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –≤ –ø–∞–ø–∫–∞—Ö Captures –∏ Focus
        subfolders_to_check = ['Captures', 'Focus']
        
        for subfolder in subfolders_to_check:
            subfolder_path = os.path.join(folder_path, subfolder)
            if os.path.exists(subfolder_path):
                image_files = self.find_image_files(subfolder_path)
                if image_files:
                    date = self.get_image_date(image_files[0])
                    if date:
                        return date
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –ª—é–±—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∞–ø–∫–µ
        image_files = self.find_image_files(folder_path)
        if image_files:
            date = self.get_image_date(image_files[0])
            if date:
                return date
        
        return None
    
    def calculate_shooting_time(self, folders, source_folder):
        """–í—ã—á–∏—Å–ª—è–µ—Ç –≤—Ä–µ–º—è —Å—ä—ë–º–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞—Ç —Å—ä—ë–º–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        if not folders:
            return "–Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å"
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–∞ —Å—ä—ë–º–∫–∏ –≤—Å–µ—Ö –ø–∞–ø–æ–∫
            shooting_times = []
            for folder in folders:
                folder_path = os.path.join(source_folder, folder)
                shooting_time = self.get_folder_shooting_time(folder_path)
                if shooting_time:
                    shooting_times.append((folder, shooting_time))
            
            if not shooting_times:
                return "–Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å"
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—ä—ë–º–∫–∏
            shooting_times.sort(key=lambda x: x[1])
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–∞–ø–∫–∏ –ø–æ –¥–Ω—è–º
            days_dict = {}
            for folder_name, timestamp in shooting_times:
                date_key = timestamp.date()
                
                if date_key not in days_dict:
                    days_dict[date_key] = []
                
                days_dict[date_key].append((folder_name, timestamp))
            
            # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è —Å—ä—ë–º–∫–∏
            total_seconds = 0
            
            for date_key, day_folders in days_dict.items():
                if len(day_folders) > 1:
                    # –í—Ä–µ–º—è —Å—ä—ë–º–∫–∏ –∑–∞ –¥–µ–Ω—å = —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏ –ø–µ—Ä–≤–æ–π –ø–∞–ø–∫–æ–π
                    first_folder_time = day_folders[0][1].timestamp()
                    last_folder_time = day_folders[-1][1].timestamp()
                    day_duration = last_folder_time - first_folder_time
                    total_seconds += day_duration
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–Ω–µ
                    first_dt = day_folders[0][1]
                    last_dt = day_folders[-1][1]
                    self.log(f"üìÖ –î–µ–Ω—å {date_key}: {first_dt.strftime('%H:%M:%S')} - {last_dt.strftime('%H:%M:%S')} "
                           f"({len(day_folders)} –ø–∞–ø–æ–∫, –≤—Ä–µ–º—è: {self.format_duration(day_duration)})", "DETAIL")
                elif len(day_folders) == 1:
                    # –ï—Å–ª–∏ –ø–∞–ø–∫–∞ –æ–¥–Ω–∞ –≤ –¥–µ–Ω—å - –≤—Ä–µ–º—è —Å—ä—ë–º–∫–∏ 0
                    self.log(f"üìÖ –î–µ–Ω—å {date_key}: 1 –ø–∞–ø–∫–∞, –≤—Ä–µ–º—è —Å—ä—ë–º–∫–∏: 00:00:00", "DETAIL")
            
            if total_seconds == 0:
                return "00:00:00"
            
            return self.format_duration(total_seconds)
            
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å—ä—ë–º–∫–∏: {str(e)}", "WARNING")
            return "–Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å"
    
    def format_duration(self, total_seconds):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç HH:MM:SS"""
        hours = int(total_seconds // 3600)
        minutes = int((total_seconds % 3600) // 60)
        seconds = int(total_seconds % 60)
        return f"{hours:02d}:{minutes:02d}:{seconds:02d}"
    
    def parse_number_range(self, range_str):
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –Ω–æ–º–µ—Ä–æ–≤ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–æ—Ä—è–¥–∫–∞ –≤–≤–æ–¥–∞"""
        numbers = []
        parts = [part.strip() for part in range_str.split(',')]
        
        for part in parts:
            if not part:
                continue
                
            if '-' in part:
                range_parts = part.split('-')
                if len(range_parts) != 2:
                    return None
                
                try:
                    start = int(range_parts[0].strip())
                    end = int(range_parts[1].strip())
                    
                    if start <= end:
                        numbers.extend(range(start, end + 1))
                    else:
                        numbers.extend(range(start, end - 1, -1))
                except ValueError:
                    return None
            else:
                try:
                    numbers.append(int(part))
                except ValueError:
                    return None
        
        return numbers
    
    def natural_sort_key(self, s):
        """–ö–ª—é—á –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∫–∞–∫ –≤ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–µ Windows"""
        return [int(text) if text.isdigit() else text.lower()
                for text in re.split('([0-9]+)', s)]
    
    def get_attack_expected_count(self, attack_name, device):
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–ø–æ–∫ –¥–ª—è –∞—Ç–∞–∫–∏ –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        if attack_name not in self.attack_ranges:
            return 0
        
        if device == "–≤—Å–µ":
            min_num = None
            max_num = None
            for device_name in ["kozen 10", "kozen 12"]:
                if device_name in self.attack_ranges[attack_name]:
                    start, end = self.attack_ranges[attack_name][device_name]
                    if min_num is None or start < min_num:
                        min_num = start
                    if max_num is None or end > max_num:
                        max_num = end
            
            if min_num is not None and max_num is not None:
                return max_num - min_num + 1
            return 0
        else:
            if device in self.attack_ranges[attack_name]:
                start, end = self.attack_ranges[attack_name][device]
                return end - start + 1
            return 0

    def log(self, message, level="INFO"):
        timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        if level == "WARNING":
            icon = "‚ö†Ô∏è"
            tag = "WARNING"
        elif level == "ERROR":
            icon = "‚ùå"
            tag = "ERROR"
        elif level == "SUCCESS":
            icon = "‚úÖ"
            tag = "SUCCESS"
        elif level == "CRITICAL":
            icon = "üö´"
            tag = "CRITICAL"
        elif level == "HEADER":
            icon = "üìã"
            tag = "HEADER"
        elif level == "DETAIL":
            icon = "  üìÑ"
            tag = "DETAIL"
        else:
            icon = "‚ÑπÔ∏è"
            tag = "INFO"
        
        formatted_message = f"[{timestamp}] {icon} {message}\n"
        
        self.log_text.insert(tk.END, formatted_message, tag)
        self.log_text.see(tk.END)
        self.root.update()
    
    def check_log(self, message, level="INFO", indent=0):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ—Ç—Å—Ç—É–ø–æ–≤"""
        timestamp = datetime.datetime.now().strftime("%H:%M:%S")
        
        if level == "WARNING":
            icon = "‚ö†Ô∏è"
            tag = "WARNING"
        elif level == "ERROR":
            icon = "‚ùå"
            tag = "ERROR"
        elif level == "SUCCESS":
            icon = "‚úÖ"
            tag = "SUCCESS"
        elif level == "CRITICAL":
            icon = "üö´"
            tag = "CRITICAL"
        elif level == "HEADER":
            icon = "üìã"
            tag = "HEADER"
        elif level == "SECTION":
            icon = "  üìÅ"
            tag = "SECTION"
        elif level == "DETAIL":
            icon = "    üìÑ"
            tag = "DETAIL"
        else:
            icon = "‚ÑπÔ∏è"
            tag = "INFO"
        
        indent_str = "  " * indent
        formatted_message = f"{indent_str}{icon} {message}\n"
        
        self.check_log_text.insert(tk.END, formatted_message, tag)
        self.check_log_text.see(tk.END)
        self.root.update()
    
    def clear_logs(self):
        self.log_text.delete(1.0, tk.END)
        self.log("–õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã", "INFO")
    
    def clear_check_logs(self):
        self.check_log_text.delete(1.0, tk.END)
        self.check_log("–õ–æ–≥–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—á–∏—â–µ–Ω—ã", "INFO")
    
    def check_folder_content(self, folder_path, log_errors=True, indent=0, check_names=False):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–∞–ø–∫–∏
        check_names: –µ—Å–ª–∏ True, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –∏–º–µ–Ω–∞ –ø–∞–ø–æ–∫ —á–∏—Å–ª–æ–≤—ã–µ (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—Ç–∞–∫)
        """
        try:
            items = os.listdir(folder_path)
            folders = [item for item in items if os.path.isdir(os.path.join(folder_path, item))]
            files = [item for item in items if os.path.isfile(os.path.join(folder_path, item))]
            
            errors = []
            warnings = []
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞–ø–æ–∫
            if len(folders) != 3:
                errors.append(f"–ù–∞–π–¥–µ–Ω–æ {len(folders)} –ø–∞–ø–æ–∫ –≤–º–µ—Å—Ç–æ 3")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è BestShot —Ñ–∞–π–ª–∞
            bestshot_files = [f for f in files if "BestShot" in f]
            if not bestshot_files:
                errors.append("–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª BestShot")
            elif len(bestshot_files) > 1:
                warnings.append(f"–ù–∞–π–¥–µ–Ω–æ {len(bestshot_files)} —Ñ–∞–π–ª–æ–≤ BestShot")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ø–∞–ø–∫–∏ –Ω–µ –ø—É—Å—Ç—ã–µ
            for folder in folders:
                folder_full_path = os.path.join(folder_path, folder)
                if not os.listdir(folder_full_path):
                    errors.append(f"–ü–∞–ø–∫–∞ '{folder}' –ø—É—Å—Ç–∞—è")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∏—Å–ª–æ–≤—ã—Ö –∏–º–µ–Ω (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ check_names=True)
            if check_names:
                non_numeric = [f for f in folders if not f.isdigit()]
                if non_numeric:
                    errors.append(f"–ù–µ—á–∏—Å–ª–æ–≤—ã–µ –∏–º–µ–Ω–∞ –ø–∞–ø–æ–∫: {', '.join(non_numeric)}")
            
            if log_errors:
                if errors:
                    for error in errors:
                        self.check_log(f"–û—à–∏–±–∫–∞: {error}", "ERROR", indent)
                if warnings:
                    for warning in warnings:
                        self.check_log(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {warning}", "WARNING", indent)
                if not errors and not warnings:
                    self.check_log("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ –≤ –ø–æ—Ä—è–¥–∫–µ", "SUCCESS", indent)
            
            return len(errors) == 0
            
        except Exception as e:
            if log_errors:
                error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞–ø–∫–∏: {str(e)}"
                self.check_log(error_msg, "ERROR", indent)
            return False
    
    def execute_renaming(self):
        source_folder = self.source_entry.get()
        dest_folder = self.dest_entry.get()
        device = self.device_var.get()
        attack = self.attack_var.get()
        check_content = self.check_content_var.get()
        
        if not source_folder or not dest_folder:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—É—é –ø–∞–ø–∫—É –∏ –ø–∞–ø–∫—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è")
            return
        
        if not os.path.exists(source_folder):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ò—Å—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return
        
        folders = [f for f in os.listdir(source_folder) 
                  if os.path.isdir(os.path.join(source_folder, f))]
        
        folders.sort(key=self.natural_sort_key)
        
        if not folders:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í –∏—Å—Ö–æ–¥–Ω–æ–π –ø–∞–ø–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–∞–ø–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return
        
        shooting_time = self.calculate_shooting_time(folders, source_folder)
        
        if device != "–≤—Å–µ" and (attack not in self.attack_ranges or device not in self.attack_ranges[attack]):
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –∞—Ç–∞–∫–∏ {attack} –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {device} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
        
        # –ü–†–û–í–ï–†–ö–ê –ö–û–õ–ò–ß–ï–°–¢–í–ê –ü–ê–ü–û–ö
        expected_count = self.get_attack_expected_count(attack, device)
        if expected_count > 0 and len(folders) < expected_count:
            response = messagebox.askyesno(
                "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", 
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–ø–æ–∫ –≤ –∏—Å—Ö–æ–¥–Ω–æ–π –ø–∞–ø–∫–µ ({len(folders)}) –º–µ–Ω—å—à–µ, —á–µ–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –∞—Ç–∞–∫–∏ ({expected_count}).\n\n"
                f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ?"
            )
            if not response:
                return
        
        try:
            os.makedirs(dest_folder, exist_ok=True)
            attack_folder = os.path.join(dest_folder, attack)
            os.makedirs(attack_folder, exist_ok=True)
            
            self.log("=" * 70, "SUCCESS")
            self.log(f"üöÄ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏...", "HEADER")
            self.log(f"üìä –ù–∞–π–¥–µ–Ω–æ –ø–∞–ø–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(folders)}", "INFO")
            if expected_count > 0:
                self.log(f"üìã –û–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –∞—Ç–∞–∫–∏: {expected_count}", "INFO")
            
            # –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–û–î–ï–†–ñ–ò–ú–û–ì–û
            if check_content:
                self.log("üîç –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ...", "INFO")
                content_errors = False
                error_details = []
                
                for folder in folders:
                    old_path = os.path.join(source_folder, folder)
                    # check_names=False - –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∏–º–µ–Ω–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                    if not self.check_folder_content(old_path, log_errors=False, check_names=False):
                        content_errors = True
                        error_details.append(folder)
                
                if content_errors:
                    self.log("üö´ –û–ë–ù–ê–†–£–ñ–ï–ù–´ –û–®–ò–ë–ö–ò! –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", "ERROR")
                    self.log(f"üìÇ –ü–∞–ø–∫–∏ —Å –æ—à–∏–±–∫–∞–º–∏: {', '.join(error_details)}", "ERROR")
                    messagebox.showerror("–û—à–∏–±–∫–∞", 
                                        "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º –ø–∞–ø–æ–∫! "
                                        "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.")
                    return
            
            processed_count = 0
            
            if device == "–≤—Å–µ":
                min_num = None
                max_num = None
                
                for device_name in ["kozen 10", "kozen 12"]:
                    if attack in self.attack_ranges and device_name in self.attack_ranges[attack]:
                        start_num, end_num = self.attack_ranges[attack][device_name]
                        if min_num is None or start_num < min_num:
                            min_num = start_num
                        if max_num is None or end_num > max_num:
                            max_num = end_num
                
                if min_num is None or max_num is None:
                    messagebox.showerror("–û—à–∏–±–∫–∞", f"–î–ª—è –∞—Ç–∞–∫–∏ {attack} –Ω–µ –∑–∞–¥–∞–Ω—ã –¥–∏–∞–ø–∞–∑–æ–Ω—ã")
                    return
                
                available_numbers = max_num - min_num + 1
                
                if len(folders) > available_numbers:
                    messagebox.showerror("–û—à–∏–±–∫–∞", 
                        f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–æ–º–µ—Ä–æ–≤ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ! "
                        f"–ù—É–∂–Ω–æ: {len(folders)}, –¥–æ—Å—Ç—É–ø–Ω–æ: {available_numbers}")
                    return
                
                current_number = min_num
                
                for folder in folders:
                    old_path = os.path.join(source_folder, folder)
                    new_name = str(current_number)
                    new_path = os.path.join(attack_folder, new_name)
                    
                    if os.path.exists(new_path):
                        shutil.rmtree(new_path)
                        self.log(f"–£–¥–∞–ª–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ø–∞–ø–∫–∞: {new_name}", "WARNING")
                    
                    shutil.copytree(old_path, new_path)
                    self.log(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {folder} ‚Üí {new_name}", "SUCCESS")
                    processed_count += 1
                    current_number += 1
            else:
                device_folder = os.path.join(attack_folder, device)
                os.makedirs(device_folder, exist_ok=True)
                
                start_num, end_num = self.attack_ranges[attack][device]
                available_numbers = end_num - start_num + 1
                
                if len(folders) > available_numbers:
                    messagebox.showerror("–û—à–∏–±–∫–∞", 
                        f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–æ–º–µ—Ä–æ–≤ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ! "
                        f"–ù—É–∂–Ω–æ: {len(folders)}, –¥–æ—Å—Ç—É–ø–Ω–æ: {available_numbers}")
                    return
                
                current_number = start_num
                
                for folder in folders:
                    old_path = os.path.join(source_folder, folder)
                    new_name = str(current_number)
                    new_path = os.path.join(device_folder, new_name)
                    
                    if os.path.exists(new_path):
                        shutil.rmtree(new_path)
                        self.log(f"–£–¥–∞–ª–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ø–∞–ø–∫–∞: {new_name}", "WARNING")
                    
                    shutil.copytree(old_path, new_path)
                    self.log(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {folder} ‚Üí {new_name}", "SUCCESS")
                    processed_count += 1
                    current_number += 1
            
            self.log("=" * 70, "SUCCESS")
            self.log(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_count} –ø–∞–ø–æ–∫", "SUCCESS")
            self.log(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è —Å—ä—ë–º–∫–∏: {shooting_time}", "INFO")
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", 
                               f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                               f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_count} –ø–∞–ø–æ–∫\n"
                               f"‚è±Ô∏è –í—Ä–µ–º—è —Å—ä—ë–º–∫–∏: {shooting_time}")
            
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞: {str(e)}", "ERROR")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    
    def execute_replacement(self):
        source_folder = self.source_entry.get()
        dest_folder = self.dest_entry.get()
        device = self.device_var.get()
        attack = self.attack_var.get()
        replace_numbers_str = self.replace_entry.get()
        check_content = self.check_content_var.get()
        
        if not replace_numbers_str:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –ø–∞–ø–æ–∫ –¥–ª—è –∑–∞–º–µ–Ω—ã")
            return
        
        replace_numbers = self.parse_number_range(replace_numbers_str)
        if replace_numbers is None:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: 522,530-532,528")
            return
        
        source_folders = [f for f in os.listdir(source_folder) 
                        if os.path.isdir(os.path.join(source_folder, f))]
        
        source_folders.sort(key=self.natural_sort_key)
        
        if len(source_folders) != len(replace_numbers):
            messagebox.showerror("–û—à–∏–±–∫–∞", 
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–ø–æ–∫ –≤ –∏—Å—Ö–æ–¥–Ω–æ–π –ø–∞–ø–∫–µ ({len(source_folders)}) "
                f"–Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è –∑–∞–º–µ–Ω—ã ({len(replace_numbers)})")
            return
        
        shooting_time = self.calculate_shooting_time(source_folders, source_folder)
        
        if device != "–≤—Å–µ" and (attack not in self.attack_ranges or device not in self.attack_ranges[attack]):
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –∞—Ç–∞–∫–∏ {attack} –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {device} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
        
        try:
            attack_folder = os.path.join(dest_folder, attack)
            
            if device == "–≤—Å–µ":
                min_num = None
                max_num = None
                
                for device_name in ["kozen 10", "kozen 12"]:
                    if attack in self.attack_ranges and device_name in self.attack_ranges[attack]:
                        start_num, end_num = self.attack_ranges[attack][device_name]
                        if min_num is None or start_num < min_num:
                            min_num = start_num
                        if max_num is None or end_num > max_num:
                            max_num = end_num
                
                if min_num is None or max_num is None:
                    messagebox.showerror("–û—à–∏–±–∫–∞", f"–î–ª—è –∞—Ç–∞–∫–∏ {attack} –Ω–µ –∑–∞–¥–∞–Ω—ã –¥–∏–∞–ø–∞–∑–æ–Ω—ã")
                    return
                
                for num in replace_numbers:
                    if num < min_num or num > max_num:
                        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–æ–º–µ—Ä {num} –≤–Ω–µ –æ–±—â–µ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ {min_num}-{max_num}")
                        return
            else:
                start_num, end_num = self.attack_ranges[attack][device]
                for num in replace_numbers:
                    if num < start_num or num > end_num:
                        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–æ–º–µ—Ä {num} –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ {start_num}-{end_num}")
                        return
            
            if not os.path.exists(attack_folder):
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü–∞–ø–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è {attack_folder} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return
            
            self.log("=" * 70, "SUCCESS")
            self.log(f"üîÑ –ù–∞—á–∞–ª–æ –∑–∞–º–µ–Ω—ã –ø–∞–ø–æ–∫...", "HEADER")
            self.log(f"üî¢ –ó–∞–º–µ–Ω—è–µ–º—ã–µ –Ω–æ–º–µ—Ä–∞: {replace_numbers}", "INFO")
            
            # –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–û–î–ï–†–ñ–ò–ú–û–ì–û
            if check_content:
                self.log("üîç –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ...", "INFO")
                content_errors = False
                error_details = []
                
                for folder in source_folders:
                    old_path = os.path.join(source_folder, folder)
                    # check_names=False - –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∏–º–µ–Ω–∞ –ø—Ä–∏ –∑–∞–º–µ–Ω–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                    if not self.check_folder_content(old_path, log_errors=False, check_names=False):
                        content_errors = True
                        error_details.append(folder)
                
                if content_errors:
                    self.log("üö´ –û–ë–ù–ê–†–£–ñ–ï–ù–´ –û–®–ò–ë–ö–ò! –ó–∞–º–µ–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", "ERROR")
                    self.log(f"üìÇ –ü–∞–ø–∫–∏ —Å –æ—à–∏–±–∫–∞–º–∏: {', '.join(error_details)}", "ERROR")
                    messagebox.showerror("–û—à–∏–±–∫–∞", 
                                        "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º –ø–∞–ø–æ–∫! "
                                        "–ó–∞–º–µ–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.")
                    return
            
            replaced_count = 0
            
            if device == "–≤—Å–µ":
                for i, folder in enumerate(source_folders):
                    old_path = os.path.join(source_folder, folder)
                    target_number = replace_numbers[i]
                    new_name = str(target_number)
                    new_path = os.path.join(attack_folder, new_name)
                    
                    if os.path.exists(new_path):
                        shutil.rmtree(new_path)
                    
                    shutil.copytree(old_path, new_path)
                    self.log(f"–ó–∞–º–µ–Ω–µ–Ω–æ: {folder} ‚Üí {new_name}", "SUCCESS")
                    replaced_count += 1
            else:
                device_folder = os.path.join(attack_folder, device)
                
                for i, folder in enumerate(source_folders):
                    old_path = os.path.join(source_folder, folder)
                    target_number = replace_numbers[i]
                    new_name = str(target_number)
                    new_path = os.path.join(device_folder, new_name)
                    
                    if os.path.exists(new_path):
                        shutil.rmtree(new_path)
                    
                    shutil.copytree(old_path, new_path)
                    self.log(f"–ó–∞–º–µ–Ω–µ–Ω–æ: {folder} ‚Üí {new_name}", "SUCCESS")
                    replaced_count += 1
            
            self.log("=" * 70, "SUCCESS")
            self.log(f"‚úÖ –ó–∞–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! –ó–∞–º–µ–Ω–µ–Ω–æ: {replaced_count} –ø–∞–ø–æ–∫", "SUCCESS")
            self.log(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è —Å—ä—ë–º–∫–∏: {shooting_time}", "INFO")
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", 
                               f"–ó–∞–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                               f"‚úÖ –ó–∞–º–µ–Ω–µ–Ω–æ –ø–∞–ø–æ–∫: {replaced_count}\n"
                               f"‚è±Ô∏è –í—Ä–µ–º—è —Å—ä—ë–º–∫–∏: {shooting_time}")
            
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–º–µ–Ω–µ: {str(e)}", "ERROR")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

    def check_attack(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∞—Ç–∞–∫–∏"""
        attack_folder = self.attack_check_entry.get()
        
        if not attack_folder:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –∞—Ç–∞–∫–∏")
            return
        
        if not os.path.exists(attack_folder):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–∞–ø–∫–∞ –∞—Ç–∞–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return
        
        self.check_log("=" * 60, "HEADER")
        self.check_log(f"üîç –ü–†–û–í–ï–†–ö–ê –ê–¢–ê–ö–ò: {os.path.basename(attack_folder)}", "HEADER")
        self.check_log("=" * 60, "HEADER")
        
        try:
            attack_name = os.path.basename(attack_folder)
            
            if attack_name not in self.attack_ranges:
                self.check_log(f"‚ùå –û–®–ò–ë–ö–ê: –ü–∞–ø–∫–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–≤–µ—Å—Ç–Ω–æ–π –∞—Ç–∞–∫–æ–π", "ERROR")
                self.check_log(f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏: {attack_name}", "INFO")
                self.check_log(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞—Ç–∞–∫–∏: {', '.join(self.attack_ranges.keys())}", "INFO")
                return
            
            attack_type = attack_name
            structure_info = self.check_attack_structure(attack_folder, attack_type)
            
            self.check_log(f"üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {structure_info['structure_type']}", "INFO")
            self.check_log(f"üìä –û–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–ø–æ–∫: {structure_info['expected_total']}", "INFO")
            
            total_errors = 0
            total_folders = 0
            total_checked = 0
            
            if structure_info['has_kozen10'] or structure_info['has_kozen12']:
                for device in ["kozen 10", "kozen 12"]:
                    if structure_info[f'has_{device.replace(" ", "")}']:
                        device_folder = os.path.join(attack_folder, device)
                        
                        self.check_log(f"", "INFO")
                        self.check_log(f"üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}", "SECTION")
                        
                        expected_count = 0
                        if attack_type in self.attack_ranges and device in self.attack_ranges[attack_type]:
                            start, end = self.attack_ranges[attack_type][device]
                            expected_count = end - start + 1
                        
                        try:
                            all_items = os.listdir(device_folder)
                            # –ü–†–ò –ü–†–û–í–ï–†–ö–ï –ê–¢–ê–ö–ò –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∏–º–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞–ø–æ–∫ –∞—Ç–∞–∫
                            folders = [f for f in all_items 
                                      if os.path.isdir(os.path.join(device_folder, f)) and f.isdigit()]
                            
                            other_items = [item for item in all_items if item not in folders]
                            if other_items:
                                self.check_log(f"‚ö†Ô∏è –ü–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã: {', '.join(other_items)}", "WARNING", 1)
                            
                            actual_count = len(folders)
                            
                            self.check_log(f"üìà –û–∂–∏–¥–∞–ª–æ—Å—å: {expected_count}", "INFO", 1)
                            self.check_log(f"üìà –ù–∞–π–¥–µ–Ω–æ: {actual_count}", 
                                         "SUCCESS" if expected_count == actual_count else "ERROR", 1)
                            
                            if expected_count > 0 and actual_count != expected_count:
                                self.check_log(f"‚ùå –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï –ö–û–õ–ò–ß–ï–°–¢–í–ê!", "ERROR", 1)
                                total_errors += 1
                            
                            # –ü–†–û–í–ï–†–ö–ê –°–û–î–ï–†–ñ–ò–ú–û–ì–û –ö–ê–ñ–î–û–ô –ü–ê–ü–ö–ò
                            self.check_log(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–∞–ø–æ–∫:", "SECTION", 1)
                            folder_errors = 0
                            for folder in folders:
                                folder_path = os.path.join(device_folder, folder)
                                self.check_log(f"üìÇ –ü–∞–ø–∫–∞ {folder}:", "DETAIL", 2)
                                # check_names=False - –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø–∞–ø–∫–∏ –º–æ–≥—É—Ç –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è –∫–∞–∫ —É–≥–æ–¥–Ω–æ
                                if not self.check_folder_content(folder_path, log_errors=True, indent=3, check_names=False):
                                    folder_errors += 1
                                total_checked += 1
                            
                            total_errors += folder_errors
                            total_folders += actual_count
                            
                            if folder_errors == 0:
                                self.check_log(f"‚úÖ –í—Å–µ –ø–∞–ø–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ", "SUCCESS", 1)
                            else:
                                self.check_log(f"‚ùå –û—à–∏–±–æ–∫ –≤ –ø–∞–ø–∫–∞—Ö: {folder_errors}", "ERROR", 1)
                        except Exception as e:
                            self.check_log(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {str(e)}", "ERROR", 1)
                            total_errors += 1
            else:
                self.check_log(f"", "INFO")
                self.check_log(f"üìÅ –ü–∞–ø–∫–∏ –≤ –∫–æ—Ä–Ω–µ –∞—Ç–∞–∫–∏", "SECTION")
                
                try:
                    all_items = os.listdir(attack_folder)
                    # –ü–†–ò –ü–†–û–í–ï–†–ö–ï –ê–¢–ê–ö–ò –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∏–º–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞–ø–æ–∫ –∞—Ç–∞–∫
                    folders = [f for f in all_items 
                              if os.path.isdir(os.path.join(attack_folder, f)) and f.isdigit()]
                    
                    other_items = [item for item in all_items if item not in folders]
                    if other_items:
                        self.check_log(f"‚ö†Ô∏è –ü–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã: {', '.join(other_items)}", "WARNING", 1)
                    
                    actual_count = len(folders)
                    
                    self.check_log(f"üìà –û–∂–∏–¥–∞–ª–æ—Å—å: {structure_info['expected_total']}", "INFO", 1)
                    self.check_log(f"üìà –ù–∞–π–¥–µ–Ω–æ: {actual_count}", 
                                 "SUCCESS" if structure_info['expected_total'] == actual_count else "ERROR", 1)
                    
                    if structure_info['expected_total'] > 0 and actual_count != structure_info['expected_total']:
                        self.check_log(f"‚ùå –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï –ö–û–õ–ò–ß–ï–°–¢–í–ê!", "ERROR", 1)
                        total_errors += 1
                    
                    # –ü–†–û–í–ï–†–ö–ê –°–û–î–ï–†–ñ–ò–ú–û–ì–û –ö–ê–ñ–î–û–ô –ü–ê–ü–ö–ò
                    self.check_log(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–∞–ø–æ–∫:", "SECTION", 1)
                    folder_errors = 0
                    for folder in folders:
                        folder_path = os.path.join(attack_folder, folder)
                        self.check_log(f"üìÇ –ü–∞–ø–∫–∞ {folder}:", "DETAIL", 2)
                        # check_names=False - –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø–∞–ø–∫–∏ –º–æ–≥—É—Ç –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è –∫–∞–∫ —É–≥–æ–¥–Ω–æ
                        if not self.check_folder_content(folder_path, log_errors=True, indent=3, check_names=False):
                            folder_errors += 1
                        total_checked += 1
                    
                    total_errors += folder_errors
                    total_folders += actual_count
                    
                    if folder_errors == 0:
                        self.check_log(f"‚úÖ –í—Å–µ –ø–∞–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ", "SUCCESS", 1)
                    else:
                        self.check_log(f"‚ùå –û—à–∏–±–æ–∫ –≤ –ø–∞–ø–∫–∞—Ö: {folder_errors}", "ERROR", 1)
                except Exception as e:
                    self.check_log(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ –∞—Ç–∞–∫–∏: {str(e)}", "ERROR", 1)
                    total_errors += 1
            
            self.check_log("", "INFO")
            self.check_log("=" * 60, "HEADER")
            if total_errors == 0:
                self.check_log(f"‚úÖ –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!", "SUCCESS")
                self.check_log(f"üìä –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –ø–∞–ø–æ–∫: {total_checked}", "SUCCESS")
                messagebox.showinfo("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", "–ê—Ç–∞–∫–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! –û—à–∏–±–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")
            else:
                self.check_log(f"‚ùå –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –° –û–®–ò–ë–ö–ê–ú–ò", "ERROR")
                self.check_log(f"üìä –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ—à–∏–±–æ–∫: {total_errors}", "ERROR")
                messagebox.showwarning("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—àena", f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏: {total_errors}")
                
        except Exception as e:
            self.check_log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞—Ç–∞–∫–∏: {str(e)}", "ERROR")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {str(e)}")

    def check_attack_structure(self, attack_folder, attack_type):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–∫–∏ –∞—Ç–∞–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–π"""
        try:
            items = os.listdir(attack_folder)
            
            has_kozen10 = "kozen 10" in items and os.path.isdir(os.path.join(attack_folder, "kozen 10"))
            has_kozen12 = "kozen 12" in items and os.path.isdir(os.path.join(attack_folder, "kozen 12"))
            
            structure_type = ""
            expected_total = self.get_attack_expected_count(attack_type, "–≤—Å–µ")
            
            if has_kozen10 or has_kozen12:
                structure_type = "—Ä–∞–∑–¥–µ–ª—å–Ω–∞—è (—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏)"
            else:
                structure_type = "–ø–ª–æ—Å–∫–∞—è (–≤—Å–µ –ø–∞–ø–∫–∏ –≤ –∫–æ—Ä–Ω–µ)"
            
            return {
                "has_kozen10": has_kozen10,
                "has_kozen12": has_kozen12,
                "structure_type": structure_type,
                "expected_total": expected_total
            }
        except Exception as e:
            return {
                "has_kozen10": False,
                "has_kozen12": False,
                "structure_type": "–æ—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞",
                "expected_total": 0
            }

    def check_id(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ ID —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–∞–ø–æ–∫"""
        id_folder = self.id_check_entry.get()
        
        if not id_folder:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É ID")
            return
        
        if not os.path.exists(id_folder):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–∞–ø–∫–∞ ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return
        
        self.check_log("=" * 60, "HEADER")
        self.check_log(f"üÜî –ü–†–û–í–ï–†–ö–ê ID: {os.path.basename(id_folder)}", "HEADER")
        self.check_log("=" * 60, "HEADER")
        
        try:
            attack_folders = []
            for item in os.listdir(id_folder):
                item_path = os.path.join(id_folder, item)
                if os.path.isdir(item_path) and item in self.attack_ranges:
                    attack_folders.append((item, item_path))
            
            if not attack_folders:
                self.check_log(f"‚ùå –û–®–ò–ë–ö–ê: –í –ø–∞–ø–∫–µ ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–∞–ø–æ–∫ –∞—Ç–∞–∫", "ERROR")
                self.check_log(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞—Ç–∞–∫–∏: {', '.join(self.attack_ranges.keys())}", "INFO")
                return
            
            total_errors = 0
            total_attacks = len(attack_folders)
            total_content_errors = 0
            
            self.check_log(f"üìä –ù–∞–π–¥–µ–Ω–æ –∞—Ç–∞–∫: {total_attacks}", "INFO")
            self.check_log("", "INFO")
            
            for attack_name, attack_folder in attack_folders:
                self.check_log(f"üéØ –ê—Ç–∞–∫–∞: {attack_name}", "SECTION")
                
                try:
                    structure_info = self.check_attack_structure(attack_folder, attack_name)
                    
                    self.check_log(f"üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {structure_info['structure_type']}", "INFO", 1)
                    self.check_log(f"üìä –û–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {structure_info['expected_total']}", "INFO", 1)
                    
                    attack_errors = 0
                    content_errors = 0
                    actual_total = 0
                    
                    if structure_info['has_kozen10'] or structure_info['has_kozen12']:
                        for device in ["kozen 10", "kozen 12"]:
                            if structure_info[f'has_{device.replace(" ", "")}']:
                                device_folder = os.path.join(attack_folder, device)
                                
                                if not os.path.exists(device_folder):
                                    self.check_log(f"‚ö†Ô∏è –ü–∞–ø–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {device} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", "WARNING", 2)
                                    continue
                                
                                expected_count = 0
                                if attack_name in self.attack_ranges and device in self.attack_ranges[attack_name]:
                                    start, end = self.attack_ranges[attack_name][device]
                                    expected_count = end - start + 1
                                
                                try:
                                    folders = [f for f in os.listdir(device_folder) 
                                              if os.path.isdir(os.path.join(device_folder, f)) and f.isdigit()]
                                    
                                    actual_count = len(folders)
                                    actual_total += actual_count
                                    
                                    status = "‚úÖ" if expected_count == actual_count else "‚ùå"
                                    self.check_log(f"{status} {device}: {actual_count}/{expected_count}", 
                                                 "SUCCESS" if expected_count == actual_count else "ERROR", 2)
                                    
                                    if expected_count > 0 and actual_count != expected_count:
                                        attack_errors += 1
                                    
                                    # –ü–†–û–í–ï–†–ö–ê –°–û–î–ï–†–ñ–ò–ú–û–ì–û –ü–ê–ü–û–ö –î–õ–Ø –ö–ê–ñ–î–û–ì–û –£–°–¢–†–û–ô–°–¢–í–ê
                                    self.check_log(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ {device}:", "SECTION", 2)
                                    device_content_errors = 0
                                    for folder in folders:
                                        folder_path = os.path.join(device_folder, folder)
                                        self.check_log(f"üìÇ –ü–∞–ø–∫–∞ {folder}:", "DETAIL", 3)
                                        if not self.check_folder_content(folder_path, log_errors=True, indent=4, check_names=False):
                                            device_content_errors += 1
                                            content_errors += 1
                                    
                                    if device_content_errors == 0:
                                        self.check_log(f"‚úÖ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ {device} –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ", "SUCCESS", 2)
                                    else:
                                        self.check_log(f"‚ùå –û—à–∏–±–æ–∫ –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º {device}: {device_content_errors}", "ERROR", 2)
                                except Exception as e:
                                    self.check_log(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {str(e)}", "ERROR", 2)
                                    attack_errors += 1
                    else:
                        try:
                            folders = [f for f in os.listdir(attack_folder) 
                                      if os.path.isdir(os.path.join(attack_folder, f)) and f.isdigit()]
                            actual_total = len(folders)
                            
                            status = "‚úÖ" if structure_info['expected_total'] == actual_total else "‚ùå"
                            self.check_log(f"{status} –í—Å–µ–≥–æ: {actual_total}/{structure_info['expected_total']}", 
                                         "SUCCESS" if structure_info['expected_total'] == actual_total else "ERROR", 2)
                            
                            if structure_info['expected_total'] > 0 and actual_total != structure_info['expected_total']:
                                attack_errors += 1
                            
                            # –ü–†–û–í–ï–†–ö–ê –°–û–î–ï–†–ñ–ò–ú–û–ì–û –ü–ê–ü–û–ö –î–õ–Ø –ü–õ–û–°–ö–û–ô –°–¢–†–£–ö–¢–£–†–´
                            self.check_log(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–∞–ø–æ–∫:", "SECTION", 2)
                            flat_content_errors = 0
                            for folder in folders:
                                folder_path = os.path.join(attack_folder, folder)
                                self.check_log(f"üìÇ –ü–∞–ø–∫–∞ {folder}:", "DETAIL", 3)
                                if not self.check_folder_content(folder_path, log_errors=True, indent=4, check_names=False):
                                    flat_content_errors += 1
                                    content_errors += 1
                            
                            if flat_content_errors == 0:
                                self.check_log(f"‚úÖ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–æ–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ", "SUCCESS", 2)
                            else:
                                self.check_log(f"‚ùå –û—à–∏–±–æ–∫ –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º: {flat_content_errors}", "ERROR", 2)
                        except Exception as e:
                            self.check_log(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ –∞—Ç–∞–∫–∏: {str(e)}", "ERROR", 2)
                            attack_errors += 1
                    
                    total_content_errors += content_errors
                    
                    if attack_errors == 0 and content_errors == 0:
                        self.check_log(f"‚úÖ –ê—Ç–∞–∫–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ", "SUCCESS", 1)
                    else:
                        error_msg = f"‚ùå –ê—Ç–∞–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–æ–∫: —Å—Ç—Ä—É–∫—Ç—É—Ä–∞={attack_errors}, —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ={content_errors}"
                        self.check_log(error_msg, "ERROR", 1)
                        total_errors += (attack_errors + content_errors)
                    
                    self.check_log("", "INFO")
                
                except Exception as e:
                    self.check_log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞—Ç–∞–∫–∏: {str(e)}", "ERROR", 1)
                    total_errors += 1
            
            self.check_log("=" * 60, "HEADER")
            if total_errors == 0:
                self.check_log(f"‚úÖ –ü–†–û–í–ï–†–ö–ê ID –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!", "SUCCESS")
                self.check_log(f"üìä –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∞—Ç–∞–∫: {total_attacks}", "SUCCESS")
                self.check_log(f"üîç –û—à–∏–±–æ–∫ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ: {total_content_errors}", "SUCCESS")
                messagebox.showinfo("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", "ID –ø—Ä–æ–≤–µ—Ä–µ–Ω —É—Å–ø–µ—à–Ω–æ! –û—à–∏–±–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")
            else:
                self.check_log(f"‚ùå –ü–†–û–í–ï–†–ö–ê ID –ó–ê–í–ï–†–®–ï–ù–ê –° –û–®–ò–ë–ö–ê–ú–ò", "ERROR")
                self.check_log(f"üìä –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ—à–∏–±–æ–∫: {total_errors}", "ERROR")
                self.check_log(f"üîç –û—à–∏–±–æ–∫ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ: {total_content_errors}", "ERROR")
                messagebox.showwarning("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", 
                                     f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏: {total_errors}\n"
                                     f"–û—à–∏–±–æ–∫ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ: {total_content_errors}")
                
        except Exception as e:
            self.check_log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ ID: {str(e)}", "ERROR")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {str(e)}")

    def check_global(self):
        """–û–±—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–∞–ø–æ–∫"""
        project_folder = self.global_check_entry.get()
        
        if not project_folder:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—â—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞")
            return
        
        if not os.path.exists(project_folder):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–û–±—â–∞—è –ø–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return
        
        self.check_log("=" * 60, "HEADER")
        self.check_log(f"üåê –û–ë–©–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–†–û–ï–ö–¢–ê", "HEADER")
        self.check_log(f"üìÅ –ü–∞–ø–∫–∞: {project_folder}", "HEADER")
        self.check_log("=" * 60, "HEADER")
        
        try:
            id_folders = []
            for item in os.listdir(project_folder):
                item_path = os.path.join(project_folder, item)
                if os.path.isdir(item_path):
                    try:
                        has_attacks = any(subitem in self.attack_ranges for subitem in os.listdir(item_path))
                        if has_attacks:
                            id_folders.append(item_path)
                    except:
                        continue
            
            if not id_folders:
                self.check_log(f"‚ùå –û–®–ò–ë–ö–ê: –í –ø—Ä–æ–µ–∫—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–∞–ø–æ–∫ ID", "ERROR")
                return
            
            total_errors = 0
            total_ids = len(id_folders)
            total_content_errors = 0
            
            self.check_log(f"üìä –ù–∞–π–¥–µ–Ω–æ ID: {total_ids}", "INFO")
            self.check_log("", "INFO")
            
            for id_folder in id_folders:
                self.check_log(f"üÜî ID: {os.path.basename(id_folder)}", "SECTION")
                
                try:
                    attack_folders = []
                    unknown_folders = []
                    
                    for item in os.listdir(id_folder):
                        item_path = os.path.join(id_folder, item)
                        if os.path.isdir(item_path):
                            if item in self.attack_ranges:
                                attack_folders.append((item, item_path))
                            else:
                                unknown_folders.append(item)
                    
                    if not attack_folders:
                        self.check_log(f"‚ùå –í –ø–∞–ø–∫–µ ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–∞–ø–æ–∫ –∞—Ç–∞–∫", "ERROR", 1)
                        total_errors += 1
                        continue
                    
                    self.check_log(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ç–∞–∫: {len(attack_folders)}", "INFO", 1)
                    
                    if unknown_folders:
                        self.check_log(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø–∞–ø–∫–∏: {', '.join(unknown_folders)}", "WARNING", 1)
                    
                    id_errors = 0
                    id_content_errors = 0
                    
                    for attack_name, attack_folder in attack_folders:
                        self.check_log(f"üéØ –ê—Ç–∞–∫–∞: {attack_name}", "INFO", 2)
                        
                        try:
                            structure_info = self.check_attack_structure(attack_folder, attack_name)
                            
                            actual_total = 0
                            attack_errors = 0
                            attack_content_errors = 0
                            
                            if structure_info['has_kozen10'] or structure_info['has_kozen12']:
                                for device in ["kozen 10", "kozen 12"]:
                                    if structure_info[f'has_{device.replace(" ", "")}']:
                                        device_folder = os.path.join(attack_folder, device)
                                        
                                        if not os.path.exists(device_folder):
                                            self.check_log(f"‚ö†Ô∏è –ü–∞–ø–∫–∞ {device} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", "WARNING", 3)
                                            continue
                                        
                                        expected_count = 0
                                        if attack_name in self.attack_ranges and device in self.attack_ranges[attack_name]:
                                            start, end = self.attack_ranges[attack_name][device]
                                            expected_count = end - start + 1
                                        
                                        try:
                                            folders = [f for f in os.listdir(device_folder) 
                                                      if os.path.isdir(os.path.join(device_folder, f)) and f.isdigit()]
                                            
                                            actual_count = len(folders)
                                            actual_total += actual_count
                                            
                                            status = "‚úÖ" if expected_count == actual_count else "‚ùå"
                                            self.check_log(f"{status} {device}: {actual_count}/{expected_count}", 
                                                         "SUCCESS" if expected_count == actual_count else "ERROR", 3)
                                            
                                            if expected_count > 0 and actual_count != expected_count:
                                                attack_errors += 1
                                            
                                            # –ü–†–û–í–ï–†–ö–ê –°–û–î–ï–†–ñ–ò–ú–û–ì–û
                                            self.check_log(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ {device}:", "SECTION", 3)
                                            device_content_errors = 0
                                            for folder in folders:
                                                folder_path = os.path.join(device_folder, folder)
                                                self.check_log(f"üìÇ –ü–∞–ø–∫–∞ {folder}:", "DETAIL", 4)
                                                if not self.check_folder_content(folder_path, log_errors=True, indent=5, check_names=False):
                                                    device_content_errors += 1
                                                    attack_content_errors += 1
                                            
                                            if device_content_errors == 0:
                                                self.check_log(f"‚úÖ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ {device} OK", "SUCCESS", 3)
                                            else:
                                                self.check_log(f"‚ùå –û—à–∏–±–æ–∫ –≤ {device}: {device_content_errors}", "ERROR", 3)
                                        except Exception as e:
                                            self.check_log(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {str(e)}", "ERROR", 3)
                                            attack_errors += 1
                            else:
                                try:
                                    folders = [f for f in os.listdir(attack_folder) 
                                              if os.path.isdir(os.path.join(attack_folder, f)) and f.isdigit()]
                                    actual_total = len(folders)
                                    
                                    status = "‚úÖ" if structure_info['expected_total'] == actual_total else "‚ùå"
                                    self.check_log(f"{status} –í—Å–µ–≥–æ: {actual_total}/{structure_info['expected_total']}", 
                                                 "SUCCESS" if structure_info['expected_total'] == actual_total else "ERROR", 3)
                                    
                                    if structure_info['expected_total'] > 0 and actual_total != structure_info['expected_total']:
                                        attack_errors += 1
                                    
                                    # –ü–†–û–í–ï–†–ö–ê –°–û–î–ï–†–ñ–ò–ú–û–ì–û
                                    self.check_log(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ:", "SECTION", 3)
                                    flat_content_errors = 0
                                    for folder in folders:
                                        folder_path = os.path.join(attack_folder, folder)
                                        self.check_log(f"üìÇ –ü–∞–ø–∫–∞ {folder}:", "DETAIL", 4)
                                        if not self.check_folder_content(folder_path, log_errors=True, indent=5, check_names=False):
                                            flat_content_errors += 1
                                            attack_content_errors += 1
                                    
                                    if flat_content_errors == 0:
                                        self.check_log(f"‚úÖ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–æ–∫ OK", "SUCCESS", 3)
                                    else:
                                        self.check_log(f"‚ùå –û—à–∏–±–æ–∫ –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º: {flat_content_errors}", "ERROR", 3)
                                except Exception as e:
                                    self.check_log(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ –∞—Ç–∞–∫–∏: {str(e)}", "ERROR", 3)
                                    attack_errors += 1
                            
                            id_content_errors += attack_content_errors
                            total_content_errors += attack_content_errors
                            
                            if attack_errors == 0 and attack_content_errors == 0:
                                self.check_log(f"‚úÖ –ê—Ç–∞–∫–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ", "SUCCESS", 3)
                            else:
                                error_msg = f"‚ùå –û—à–∏–±–∫–∏: —Å—Ç—Ä—É–∫—Ç—É—Ä–∞={attack_errors}, —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ={attack_content_errors}"
                                self.check_log(error_msg, "ERROR", 3)
                                id_errors += (attack_errors + attack_content_errors)
                        
                        except Exception as e:
                            self.check_log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞—Ç–∞–∫–∏: {str(e)}", "ERROR", 3)
                            id_errors += 1
                    
                    total_errors += id_errors
                    
                    if id_errors == 0:
                        self.check_log(f"‚úÖ ID –ø—Ä–æ–≤–µ—Ä–µ–Ω —É—Å–ø–µ—à–Ω–æ", "SUCCESS", 1)
                    else:
                        self.check_log(f"‚ùå ID —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–æ–∫: {id_errors}", "ERROR", 1)
                
                except Exception as e:
                    self.check_log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ ID: {str(e)}", "ERROR", 1)
                    total_errors += 1
                
                self.check_log("", "INFO")
            
            self.check_log("=" * 60, "HEADER")
            if total_errors == 0:
                self.check_log(f"‚úÖ –û–ë–©–ê–Ø –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!", "SUCCESS")
                self.check_log(f"üìä –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ ID: {total_ids}", "SUCCESS")
                self.check_log(f"üîç –û—à–∏–±–æ–∫ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ: {total_content_errors}", "SUCCESS")
                messagebox.showinfo("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", "–ü—Ä–æ–µ–∫—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω —É—Å–ø–µ—à–Ω–æ! –û—à–∏–±–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")
            else:
                self.check_log(f"‚ùå –û–ë–©–ê–Ø –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –° –û–®–ò–ë–ö–ê–ú–ò", "ERROR")
                self.check_log(f"üìä –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ—à–∏–±–æ–∫: {total_errors}", "ERROR")
                self.check_log(f"üìä –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ ID: {total_ids}", "INFO")
                self.check_log(f"üîç –û—à–∏–±–æ–∫ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ: {total_content_errors}", "ERROR")
                messagebox.showwarning("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", 
                                     f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏: {total_errors}\n"
                                     f"–û—à–∏–±–æ–∫ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ: {total_content_errors}\n"
                                     f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ ID: {total_ids}")
                
        except Exception as e:
            self.check_log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ–µ–∫—Ç–∞: {str(e)}", "ERROR")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {str(e)}")

    def load_attack_data(self, event=None):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∞—Ç–∞–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        attack = self.edit_attack_var.get()
        if attack in self.attack_ranges:
            ranges = self.attack_ranges[attack]
            
            kozen10 = ranges.get("kozen 10", (0, 0))
            kozen12 = ranges.get("kozen 12", (0, 0))
            
            self.kozen10_entry.delete(0, tk.END)
            self.kozen10_entry.insert(0, f"{kozen10[0]}-{kozen10[1]}" if kozen10 != (0,0) else "")
            
            self.kozen12_entry.delete(0, tk.END)
            self.kozen12_entry.insert(0, f"{kozen12[0]}-{kozen12[1]}" if kozen12 != (0,0) else "")
    
    def save_attack_data(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∞—Ç–∞–∫–∏"""
        attack = self.edit_attack_var.get()
        if not attack:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –∞—Ç–∞–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        try:
            kozen10_str = self.kozen10_entry.get().strip()
            kozen12_str = self.kozen12_entry.get().strip()
            
            new_ranges = {}
            
            if kozen10_str:
                start, end = map(int, kozen10_str.split('-'))
                new_ranges["kozen 10"] = (start, end)
            
            if kozen12_str:
                start, end = map(int, kozen12_str.split('-'))
                new_ranges["kozen 12"] = (start, end)
            
            if not new_ranges:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¥–∏–∞–ø–∞–∑–æ–Ω")
                return
            
            self.attack_ranges[attack] = new_ranges
            self.save_attack_config()
            
            attacks = list(self.attack_ranges.keys())
            self.attack_combo['values'] = attacks
            self.edit_attack_combo['values'] = attacks
            
            self.log(f"–ê—Ç–∞–∫–∞ {attack} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞", "SUCCESS")
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ê—Ç–∞–∫–∞ {attack} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")
    
    def new_attack(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∞—Ç–∞–∫–∏"""
        attack = tk.simpledialog.askstring("–ù–æ–≤–∞—è –∞—Ç–∞–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∞—Ç–∞–∫–∏:")
        if attack:
            if attack in self.attack_ranges:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ê—Ç–∞–∫–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return
            
            self.attack_ranges[attack] = {}
            self.save_attack_config()
            
            attacks = list(self.attack_ranges.keys())
            self.attack_combo['values'] = attacks
            self.edit_attack_combo['values'] = attacks
            
            self.edit_attack_var.set(attack)
            self.load_attack_data()
            
            self.log(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∞—Ç–∞–∫–∞: {attack}", "SUCCESS")
    
    def rename_attack(self):
        """–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∞—Ç–∞–∫–∏"""
        old_attack = self.edit_attack_var.get()
        if not old_attack:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –∞—Ç–∞–∫—É –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è")
            return
        
        new_attack = tk.simpledialog.askstring("–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∞—Ç–∞–∫–∏", 
                                              f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∞—Ç–∞–∫–∏ {old_attack}:",
                                              initialvalue=old_attack)
        if new_attack:
            if new_attack in self.attack_ranges:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ê—Ç–∞–∫–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return
            
            attack_data = self.attack_ranges[old_attack]
            del self.attack_ranges[old_attack]
            self.attack_ranges[new_attack] = attack_data
            self.save_attack_config()
            
            attacks = list(self.attack_ranges.keys())
            self.attack_combo['values'] = attacks
            self.edit_attack_combo['values'] = attacks
            
            self.attack_var.set(new_attack)
            self.edit_attack_var.set(new_attack)
            self.load_attack_data()
            
            self.log(f"–ê—Ç–∞–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞: {old_attack} ‚Üí {new_attack}", "SUCCESS")
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ê—Ç–∞–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞: {old_attack} ‚Üí {new_attack}")
    
    def delete_attack(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∞—Ç–∞–∫–∏"""
        attack = self.edit_attack_var.get()
        if not attack:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –∞—Ç–∞–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞—Ç–∞–∫—É {attack}?"):
            del self.attack_ranges[attack]
            self.save_attack_config()
            
            attacks = list(self.attack_ranges.keys())
            self.attack_combo['values'] = attacks
            self.edit_attack_combo['values'] = attacks
            
            if attacks:
                self.edit_attack_var.set(attacks[0])
                self.load_attack_data()
            else:
                self.edit_attack_var.set("")
                self.kozen10_entry.delete(0, tk.END)
                self.kozen12_entry.delete(0, tk.END)
            
            self.log(f"–ê—Ç–∞–∫–∞ {attack} —É–¥–∞–ª–µ–Ω–∞", "SUCCESS")

def main():
    root = tk.Tk()
    app = ModernFolderRenamer(root)
    root.mainloop()

if __name__ == "__main__":
    main()